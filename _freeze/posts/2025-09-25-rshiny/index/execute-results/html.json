{
  "hash": "bdebd5a3e70f974954ec014fc6924231",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R shiny\"\nauthor: \"Henrik Vitus Bering Laursen\"\ndate: \"2025-09-25\"\ncategories:\n  - hospital usage\n  - r shiny dashboard\nformat:\n  html:\n    toc: true\n    number-sections: true\n    fig-width: 8\n    fig-height: 6\n    code-fold: true\n    code-summary: \"Show the code\"\ndraft: false\n\nimage: thumbnail.jpg # make via: ggsave(\"thumbnail.jpg\", plot = last_plot(), width = 6, height = 4)\n---\n\n## Purpose\n\nI wanted to walk through how to use `R shiny` and put in some Danish publicly available statistics.\n\nI want to do the following:\n\n- Establish how to get the data necessary\n- Get the data\n- Step-by-step how to use `R shiny` in the simplest possible way\n  - one outcome, one group, over time\n- Stop it there and then explore more in another post\n\nSo here we go.\n\n\n## The Process\n\n### Analysis plan\n\nFirst I sign in to Statistics Denmark website, after creating a user (necessary for bigger downloads).\n\nThen, I pick out a type of data I want to look at. There are so many. Because of my interest in healthcare I look at the table for hospital utilization, [SBR04](https://www.statistikbanken.dk/statbank5a/SelectVarVal/Define.asp?Maintable=SBR04&PLanguage=0).\n\n**From** that table I **select** all variables. I will probably only use very few, but I do it just in case I use more of it in the future.\n\nI will then:\n\n- Explore the data to find what I find interesting\n- Try to structure the `R shiny` around what would be interesting to look at given the data\n- Build the `R shiny` app. Probably actually publish it online, while remembering to cite Statistics Denmark as the source\n\n### Load\n\n#### Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"~/publicdataprojects/scripts/source.R\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n#### Data\n\nThe process of finding data from Statistics Denmark currently comes in these steps:\n\n- Find [overview of tables](https://www.statistikbanken.dk/statbank5a/SelectTable/Omrade0.asp?PLanguage=0)\n- Select a subtable\n- Select variables from that table, then click \"vis tabel\"\n- Click on the selection of different export formats (Matrix [*.csv] is the type i'm used to)\n- Import the downloaded file, remembering to account for Danish locale\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_path <- c(\"C:/Users/henri/Downloads/2025917133644569067073SBR0449248987343.csv\")\n\ndf <- read_csv(file_path)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 539 Columns: 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in nchar(x, \"width\"): invalid multibyte string, element 1\n```\n\n\n:::\n:::\n\n\nOdd. I didnt expect that error. Let's see whats up.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_all <- read_lines(file_path)\nhead(read_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"\\\"K\\xf8n i alt\\\";\\\"Alder i alt\\\";\\\"Uanset sygehusv\\xe6sen\\\";\\\"Personer med ophold (antal)\\\";2788101.0;2876145.0;2900078.0;2793650.0;2838793.0;2919830.0;2962563.0;2957759.0\"                     \n[2] \"\\\"K\\xf8n i alt\\\";\\\"Alder i alt\\\";\\\"Uanset sygehusv\\xe6sen\\\";\\\"Personer med ophold (pct.)\\\";48.2;49.5;49.8;47.8;48.3;49.2;49.7;49.4\"                                                              \n[3] \"\\\"K\\xf8n i alt\\\";\\\"Alder i alt\\\";\\\"Uanset sygehusv\\xe6sen\\\";\\\"Ophold per person (antal)\\\";2.1;2.2;2.3;2.1;2.2;2.2;2.2;2.2\"                                                                       \n[4] \"\\\"K\\xf8n i alt\\\";\\\"Alder i alt\\\";\\\"Uanset sygehusv\\xe6sen\\\";\\\"Personer med ophold p\\xe5 under 12 timer (antal)\\\";2713543.0;2804125.0;2831454.0;2725266.0;2769264.0;2851193.0;2895701.0;2890614.0\"\n[5] \"\\\"K\\xf8n i alt\\\";\\\"Alder i alt\\\";\\\"Uanset sygehusv\\xe6sen\\\";\\\"Personer med ophold p\\xe5 under 12 timer (pct.)\\\";46.9;48.3;48.6;46.7;47.1;48.1;48.6;48.2\"                                         \n[6] \"\\\"K\\xf8n i alt\\\";\\\"Alder i alt\\\";\\\"Uanset sygehusv\\xe6sen\\\";\\\"Ophold p\\xe5 under 12 timer per person (antal)\\\";2.0;2.0;2.2;2.0;2.0;2.1;2.1;2.1\"                                                  \n```\n\n\n:::\n:::\n\nOk this may need a different reading function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_delim(file_path,\n           delim = \";\",\n           locale = locale(encoding = \"ISO-8859-1\"),\n           col_names = FALSE\n           )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 540 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (4): X1, X2, X3, X4\ndbl (8): X5, X6, X7, X8, X9, X10, X11, X12\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 12\n  X1        X2      X3    X4        X5     X6     X7     X8     X9    X10    X11\n  <chr>     <chr>   <chr> <chr>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Køn i alt Alder … Uans… Pers… 2.79e6 2.88e6 2.90e6 2.79e6 2.84e6 2.92e6 2.96e6\n2 Køn i alt Alder … Uans… Pers… 4.82e1 4.95e1 4.98e1 4.78e1 4.83e1 4.92e1 4.97e1\n3 Køn i alt Alder … Uans… Opho… 2.1 e0 2.2 e0 2.3 e0 2.1 e0 2.2 e0 2.2 e0 2.2 e0\n4 Køn i alt Alder … Uans… Pers… 2.71e6 2.80e6 2.83e6 2.73e6 2.77e6 2.85e6 2.90e6\n5 Køn i alt Alder … Uans… Pers… 4.69e1 4.83e1 4.86e1 4.67e1 4.71e1 4.81e1 4.86e1\n6 Køn i alt Alder … Uans… Opho… 2   e0 2   e0 2.2 e0 2   e0 2   e0 2.1 e0 2.1 e0\n# ℹ 1 more variable: X12 <dbl>\n```\n\n\n:::\n:::\n\n\nAlright. I expected comma, but it was semicolons. And some googling revealed \"ISO-8859-1\" as the danish encoding.\n\n### Clean\n\n**Now**, the structure seems to need some cleaning, with several repeating values. The columns seem to be \"supercolumns\" with each column from the left to the right being \"beneath\" in the level of grouping of the previous.\n\nFirst, let's replace those `X` column names with their corresponding actual names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename descriptor columns\ndf2 <- df |> rename(sex = X1, age = X2, sector = X3, measure = X4)\n\n# Rename year columns\nyear_labels <- c(\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\")\nnames(df2)[5:12] <- year_labels\n\nhead(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 12\n  sex      age   sector measure `2017` `2018` `2019` `2020` `2021` `2022` `2023`\n  <chr>    <chr> <chr>  <chr>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Køn i a… Alde… Uanse… Person… 2.79e6 2.88e6 2.90e6 2.79e6 2.84e6 2.92e6 2.96e6\n2 Køn i a… Alde… Uanse… Person… 4.82e1 4.95e1 4.98e1 4.78e1 4.83e1 4.92e1 4.97e1\n3 Køn i a… Alde… Uanse… Ophold… 2.1 e0 2.2 e0 2.3 e0 2.1 e0 2.2 e0 2.2 e0 2.2 e0\n4 Køn i a… Alde… Uanse… Person… 2.71e6 2.80e6 2.83e6 2.73e6 2.77e6 2.85e6 2.90e6\n5 Køn i a… Alde… Uanse… Person… 4.69e1 4.83e1 4.86e1 4.67e1 4.71e1 4.81e1 4.86e1\n6 Køn i a… Alde… Uanse… Ophold… 2   e0 2   e0 2.2 e0 2   e0 2   e0 2.1 e0 2.1 e0\n# ℹ 1 more variable: `2024` <dbl>\n```\n\n\n:::\n:::\n\n\n#### Filtering\n\nThe first column, `Sex`, is \"Køn i alt\" which is both sexes. I want to see the difference in sexes so I will remove, or filter out, those columns. Also, I want age ranges, and not total. Finally, I want it to be divided into somatic and psychiatric. All of these will be filtered out below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 <- df2 |>\n  filter(sex != \"Køn i alt\",\n         age != \"Alder i alt\",\n         sector != \"Uanset sygehusvæsen\")\nhead(df3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 12\n  sex   age     sector  measure   `2017`  `2018`  `2019`  `2020`  `2021`  `2022`\n  <chr> <chr>   <chr>   <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Mænd  0-17 år Somatik Persone… 2.17e+5 2.16e+5 2.19e+5 2.07e+5 2.06e+5 2.15e+5\n2 Mænd  0-17 år Somatik Persone… 3.64e+1 3.63e+1 3.69e+1 3.5 e+1 3.49e+1 3.62e+1\n3 Mænd  0-17 år Somatik Ophold … 9   e-1 9   e-1 9   e-1 9   e-1 9   e-1 9   e-1\n4 Mænd  0-17 år Somatik Persone… 2.06e+5 2.06e+5 2.09e+5 1.98e+5 1.97e+5 2.06e+5\n5 Mænd  0-17 år Somatik Persone… 3.45e+1 3.46e+1 3.53e+1 3.36e+1 3.34e+1 3.47e+1\n6 Mænd  0-17 år Somatik Ophold … 8   e-1 8   e-1 8   e-1 8   e-1 8   e-1 8   e-1\n# ℹ 2 more variables: `2023` <dbl>, `2024` <dbl>\n```\n\n\n:::\n:::\n\n\nThis leaves a dataset divided into the following groupings:\n\n- Men and women\n- Age ranges\n- Somatic contact\n- Psychiatric contact\n- Both Somatic Psychiatric\n\nAnd then subvariables for each of the above for:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 |> distinct(measure)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 1\n  measure                                              \n  <chr>                                                \n1 Personer med ophold (antal)                          \n2 Personer med ophold (pct.)                           \n3 Ophold per person (antal)                            \n4 Personer med ophold på under 12 timer (antal)        \n5 Personer med ophold på under 12 timer (pct.)         \n6 Ophold på under 12 timer per person (antal)          \n7 Personer med ophold på 12 timer eller derover (antal)\n8 Personer med ophold på 12 timer eller derover (pct.) \n9 Ophold på 12 timer eller derover per person (antal)  \n```\n\n\n:::\n:::\n\n\n#### Modifying language\n\nAnd, because it is there, and I do not miss out on any learning by translating the data to english via GPT, I'm gonna put in and example dataset and ask GPT to translate all values in Danish, to English. And ofcourse just do it by hand the few places where simple letters can be changed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hand translate the easy ones\n\ndf4 <- df3 |>\n  mutate(sex = str_replace_all(sex,\"Mænd\",\"Men\"),\n         sex = str_replace_all(sex,\"Kvinder\",\"Women\"),\n         age = str_replace_all(age,\"år\",\"years\"),\n         age = str_replace_all(age,\"og derover\",\"\"),\n         age = str_replace_all(age,\"60 years\",\"60+ years\"),\n         sector = str_replace_all(sector,\"Somatik\",\"Somatic\"),\n         sector = str_replace_all(sector,\"Psykiatri\",\"Psychiatry\"),\n         sector = str_replace_all(sector,\"Både somatik og psykiatri\",\"Both somatic and psychiatry\")\n         )\n\n# GPT aided translation of the measure\n  # clean text\ndf5 <- df4 |>\n  mutate(\n    measure = str_squish(measure)              # trim & collapse whitespace\n  )\n\n  # Define a named lookup (DA -> EN)\nda_en <- c(\n  \"Personer med ophold (antal)\"                          = \"Persons with stays (number)\",\n  \"Personer med ophold (pct.)\"                           = \"Persons with stays (percent)\",\n  \"Ophold per person (antal)\"                            = \"Stays per person (number)\",\n  \"Personer med ophold på under 12 timer (antal)\"        = \"Persons with stays under 12 hours (number)\",\n  \"Personer med ophold på under 12 timer (pct.)\"         = \"Persons with stays under 12 hours (percent)\",\n  \"Ophold på under 12 timer per person (antal)\"          = \"Stays under 12 hours per person (number)\",\n  \"Personer med ophold på 12 timer eller derover (antal)\"= \"Persons with stays of 12 hours or more (number)\",\n  \"Personer med ophold på 12 timer eller derover (pct.)\" = \"Persons with stays of 12 hours or more (percent)\",\n  \"Ophold på 12 timer eller derover per person (antal)\"  = \"Stays of 12 hours or more per person (number)\"\n)\n\n  # Translate (keep originals that don’t match)\ndf6 <- df5  |>\n  mutate(measure = recode(measure, !!!da_en, .default = measure))\n```\n:::\n\n\nI had a hard time understanding the `!!!` thingy. Its [reference page](https://rlang.r-lib.org/reference/topic-inject.html) is helpful.\n\nIn plain terms, that I can understand, it injects, or *splices*, x into y, where x is a list and y is something else. Possibly a list, too. In the above example, the \"lookup\" object called `da_en`, is injected into the `recode()` function. So basically it tells `recode()` that for its chosen variable, X4, it can take the list as a series of operations it must go through.\n\nAnother way, which I am used to and learned before using AI, is just using [`case_when()`](https://dplyr.tidyverse.org/reference/case_when.html). I like that one a lot since it is super easy to understand. When *i* is the case, set a chosen variable, *j* to *k*. It is perhaps better explained as a vectorized if-else statement.\n\n#### Pivoting\n\nAdditionally, I will need to reshape / pivot the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf7 <- df6 |>\n  pivot_longer(\n    cols = 5:12,\n    names_to = \"year\",\n    values_to = \"value\"\n    ) |>\n  mutate(year = as.integer(year),\n         across(where(is.character), as.factor)\n  )\n\nhead(df7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  sex   age        sector  measure                      year  value\n  <fct> <fct>      <fct>   <fct>                       <int>  <dbl>\n1 Men   0-17 years Somatic Persons with stays (number)  2017 217228\n2 Men   0-17 years Somatic Persons with stays (number)  2018 216064\n3 Men   0-17 years Somatic Persons with stays (number)  2019 218968\n4 Men   0-17 years Somatic Persons with stays (number)  2020 207051\n5 Men   0-17 years Somatic Persons with stays (number)  2021 206277\n6 Men   0-17 years Somatic Persons with stays (number)  2022 214619\n```\n\n\n:::\n:::\n\n\nSo - Now we have a dataset with the following:\n\n- Supercategories\n  - Sex\n  - Age intervals\n  - Sector\n- Output measure categories and their values\n- All summarised within each year of registration\n\nThat should be clean enough to start putting into an R shiny app.\n\n### Output\n\n#### Initial plots\n\nLet's see what some of the data looks like before creating a dashboard. We can work with the bigger and simpler numbers first - The amount of people who have stayed in the hospital, by each year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf7 |> filter(measure == \"Persons with stays (number)\") |>\n  mutate(value2 = value / 1000) |>\n  ggplot(aes(year, value2, color = age)) +\n  geom_line() +\n  facet_grid(\n    rows = vars(sex),\n    cols = vars(sector)) +\n  labs(x = NULL, y = \"Count in 1000s\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Plot - stays by year-1.png){width=768}\n:::\n:::\n\n\nIt doesn't make much sense to compare the different sectors visually, so lets look at the sectors by themselves to start with, and focus on Sex.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf7 |> filter(\n  measure == \"Persons with stays (number)\",\n  sector == \"Somatic\" ) |>\n  mutate(value2 = value / 1000) |>\n  ggplot(aes(year, value2, color = age)) +\n  geom_line() +\n  facet_grid(\n    cols = vars(sex)\n    ) +\n  labs(x = NULL, y = \"Count in 1000s\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Plot - stays by year and sector somatic-1.png){width=768}\n:::\n\n```{.r .cell-code}\nggsave(\"thumbnail.jpg\", plot = last_plot(), width = 6, height = 4) # saved as thumbnail\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf7 |> filter(\n  measure == \"Persons with stays (number)\",\n  sector == \"Psychiatry\" ) |>\n  mutate(value2 = value / 1000) |>\n  ggplot(aes(year, value2, color = age)) +\n  geom_line() +\n  facet_grid(\n    cols = vars(sex)\n    ) +\n  labs(x = NULL, y = \"Count in 1000s\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Plot - stays by year and sector psych-1.png){width=768}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf7 |> filter(\n  measure == \"Persons with stays (number)\",\n  sector == \"Both somatic and psychiatry\" ) |>\n  mutate(value2 = value / 1000) |>\n  ggplot(aes(year, value2, color = age)) +\n  geom_line() +\n  facet_wrap( ~ sex) +\n  labs(x = NULL, y = \"Count in 1000s\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Plot - stays by year and sector somatic and psych-1.png){width=768}\n:::\n:::\n\n\nThese graphs are very interesting for displaying differences between the sexes, in terms of stays in hospital.\n\n**Notable results**:\n\n- More of the female sex stay in hospitals, except for:\n  - Males aged 0-17 somatic\n  - Males aged 0-17 psychiatry\n- Remarkably similar results for men and women aged 30 to 60+ with both somatic and psychiatric stays\n\nAnd this is only the counts. What about all the other `measures`?:\n\n- Persons with stays (percent)\n- Persons with stays of 12 hours or more (number)\n- Persons with stays of 12 hours or more (percent)\n- Persons with stays under 12 hours (number)\n- Persons with stays under 12 hours (percent)\n- Stays of 12 hours or more per person (number)\n- Stays per person (number)\n- Stays under 12 hours per person (number)\n\nIn my estimation, a lot of info can be gleaned just from setting up a dashboard that lets you pick between these different measures, with the three plots I made above.\n\n#### R shiny basics\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages <- c(\"shiny\", \"bslib\")\nipak(packages)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: shiny\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: bslib\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'bslib'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:utils':\n\n    page\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshiny bslib \n TRUE  TRUE \n```\n\n\n:::\n:::\n\n\nWith the R shiny packages loaded ([`bslib`](https://rstudio.github.io/bslib/) just lets you customize the R shiny dashboard more), it is time to start setting up the dashboard.\n\nIt seems like the example that is structured in the [`bslib` github](https://rstudio.github.io/bslib/articles/dashboards/index.html) fits what I want to create as an initial dashboard:\n\n- Three separate plots\n- One for each sector\n- Containing a measure\n- Coloured by age groups\n- Facet wrapped by sex\n\nSo let's go. With R shiny you can make dashboards which update based on your input. Shiny code, producing a dashboard, [basically](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/) consists of:\n\n- A User interface (UI) *object*\n  - controls how it looks\n- A Server function\n  - controls how the app is built\n- The ShinyApp() function call\n  - creates shiny app objects from UI/server pair\n\nYou can host the dashboard locally or by connecting with it on [Shiny apps website](www.shinyapps.io), which requires a user.\n\nI will try to make it here, and make it available on that website, or here in the blogpost if that is possible.\n\nFirst, I take code that fits, from the bslib github mentioned above that fits what I want:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(penguins, package = \"palmerpenguins\")\n\nui <- page_sidebar(\n  title = \"Penguins dashboard\",\n  sidebar = sidebar(\n    title = \"Histogram controls\",\n    varSelectInput(\n      \"var\", \"Select variable\",\n      dplyr::select_if(penguins, is.numeric)\n    ),\n    numericInput(\"bins\", \"Number of bins\", 30)\n  ),\n  card(\n    card_header(\"Histogram\"),\n    plotOutput(\"p\")\n  )\n)\n\nserver <- function(input, output) {\n  output$p <- renderPlot({\n    ggplot(penguins) +\n      geom_histogram(aes(!!input$var), bins = input$bins) +\n      theme_bw(base_size = 20)\n  })\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bslib example shiny dashboard-1.png){width=768}\n:::\n:::\n\n\nAlright. That actually just works! It seems to have opened in R studio, so must be hosted locally.\n\nNow, I have to adapt it to my needs:\n\n- Input my own data, which should be cleaned for use\n- Make the three cards, for each of the three plots\n- Make my own dashboard with the ui+server+shinyapp() trifecta\n\nHere we go.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cards\n\ncards <- list(\n  card(\n    full_screen = TRUE,\n    card_header(\"Somatic sector\"),\n    plotOutput(\"soma\")\n  ),\n  card(\n    full_screen = TRUE,\n    card_header(\"Psychiatric sector\"),\n    plotOutput(\"psych\")\n  ),\n  card(\n    full_screen = TRUE,\n    card_header(\"Both sectors\"),\n    plotOutput(\"somapsych\")\n  )\n)\n\nmeasure <- selectInput(\n  \"measure\", \"Measure\",\n  choices = sort(unique(df7$measure))\n)\n```\n:::\n\n\nAnd then the dashboard.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_sector <- function(data, sector_label) {\n  data_sector <- data |> filter(sector == sector_label)\n  req(nrow(data_sector) > 0)  # show nothing if that sector isn't present\n\n  ggplot(data_sector, aes(x = year, y = value, color = age)) +\n    geom_line() +\n    geom_point() +\n    facet_wrap(~ sex, nrow = 2) +\n    theme(\n      plot.title = element_blank(),\n      legend.position = \"bottom\",\n    ) +\n    labs(\n      title = sector_label,\n      x = NULL, color = \"Age\",\n      y = NULL\n    ) +\n    theme_bw(base_size = 12)\n}\n\nmeasures <- df7 |>\n  distinct(measure) |>\n  arrange(measure) |>\n  pull(measure)\n\nui <- page_sidebar(\n  title = \"Hospital stays — dashboard\",\n  sidebar = tagList(\n    selectInput(\"measure\", \"Measure\", choices = measures, selected = measures[1]),\n    helpText(\"All plots update to the selected measure.\"),\n    helpText(\"Lines = time\"),\n    helpText(\"Color = age\"),\n    helpText(\"Facets = sex\"),\n    helpText(\"Data has been supplied by Statistics Denmark (table SBR04), which contains aggregate data on hospital usage in Denmark between 2017-2024.\")\n  ),\n  # 3 cards side-by-side (wraps on narrow screens)\n  layout_columns(width = 1,\n     card(\n       full_screen = TRUE,\n       card_header(\"Somatic\"),\n       plotOutput(\"plot_somatic\", height = 300)\n     ),\n     card(\n       full_screen = TRUE,\n       card_header(\"Psychiatric\"),\n       plotOutput(\"plot_psychiatric\", height = 300)\n     ),\n     card(\n       full_screen = TRUE,\n       card_header(\"Both\"),\n       plotOutput(\"plot_both\", height = 300)\n     )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Filter once by measure; reuse for all sectors\n  dat_measure <- reactive({\n    req(input$measure)\n    df7 |> filter(measure == input$measure)\n  })\n\n  output$plot_somatic     <- renderPlot(plot_sector(dat_measure(), sector_label = \"Somatic\"))\n  output$plot_psychiatric <- renderPlot(plot_sector(dat_measure(), sector_label = \"Psychiatry\"))\n  output$plot_both        <- renderPlot(plot_sector(dat_measure(), sector_label = \"Both somatic and psychiatry\"))\n\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nListening on http://127.0.0.1:8466\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/Dashboard created with help - not complex-1.png){width=768}\n:::\n:::\n\nFantastic!!! It is now created. But how will it be viewed on the blog? The guide on shinyapps.io details that we need to install rsconnect, authorize account, and then deploy. See the [Getting Started page of shinyapps.io](https://www.shinyapps.io/admin/#/dashboard) when you login. Or if using Rstudio, it can just be deployed with the \"publish\" button.\n\nBut I am confused about how an app will be displayed on this blog.\n\n**The simplest solution seems to be a link within the blog post to the shiny dashboard, hosted on the shinyapps.io servers.**\n\n**Below is the link to the resulting dashboard. Purpose complete!**\n\n\n::: {.callout-important icon=false}\n\n## Link to post\n\n[Click here to get to my resulting R shiny Dashboard](https://ceuiyr-henrik-laursen.shinyapps.io/post10/)\n\n:::\n\n\n## Summary / cleaned up / refactored\n\n\n```\n#| label: Summary chunk\n#| echo: true\n#| output: false\n\n# Packages\nipak <- function(pkg){\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg))\n    install.packages(new.pkg, dependencies = TRUE)\n  sapply(pkg, require, character.only = TRUE)\n}\n\nipak_list <- c(\"tidyverse\", \"here\", \"shiny\", \"bslib\")\nipak(ipak_list)\n\n# Load data\ndf <- read_delim(\"insert file name\",\n           delim = \";\",\n           locale = locale(encoding = \"ISO-8859-1\"),\n           col_names = FALSE\n           ) |>\n  rename(sex = X1, age = X2, sector = X3, measure = X4)\n\n# Prepping for long data cleaning chain\nyear_labels <- c(\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\")\nnames(df)[5:12] <- year_labels\nda_en <- c(\n  \"Personer med ophold (antal)\"                          = \"Persons with stays (number)\",\n  \"Personer med ophold (pct.)\"                           = \"Persons with stays (percent)\",\n  \"Ophold per person (antal)\"                            = \"Stays per person (number)\",\n  \"Personer med ophold på under 12 timer (antal)\"        = \"Persons with stays under 12 hours (number)\",\n  \"Personer med ophold på under 12 timer (pct.)\"         = \"Persons with stays under 12 hours (percent)\",\n  \"Ophold på under 12 timer per person (antal)\"          = \"Stays under 12 hours per person (number)\",\n  \"Personer med ophold på 12 timer eller derover (antal)\"= \"Persons with stays of 12 hours or more (number)\",\n  \"Personer med ophold på 12 timer eller derover (pct.)\" = \"Persons with stays of 12 hours or more (percent)\",\n  \"Ophold på 12 timer eller derover per person (antal)\"  = \"Stays of 12 hours or more per person (number)\"\n)\n\n# Data cleaning chain\ndf <- df |>\n  filter(sex != \"Køn i alt\",\n         age != \"Alder i alt\",\n         sector != \"Uanset sygehusvæsen\") |>\n  mutate(sex = str_replace_all(sex,\"Mænd\",\"Men\"),\n         sex = str_replace_all(sex,\"Kvinder\",\"Women\"),\n         age = str_replace_all(age,\"år\",\"years\"),\n         age = str_replace_all(age,\"og derover\",\"\"),\n         age = str_replace_all(age,\"60 years\",\"60+ years\"),\n         sector = str_replace_all(sector,\"Somatik\",\"Somatic\"),\n         sector = str_replace_all(sector,\"Psykiatri\",\"Psychiatry\"),\n         sector = str_replace_all(sector,\"Både somatik og psykiatri\",\"Both somatic and psychiatry\")\n         ) |>\n  mutate(across(where(is.character), as.factor),\n         measure = str_squish(measure),\n         measure = recode(measure, !!!da_en, .default = measure),\n         value2 = value / 1000\n         )\n\n# Pilot Plot\ndf |> filter(\n  measure == \"Persons with stays (number)\",\n  sector == \"Both somatic and psychiatry\" ) |>\n  ggplot(aes(year, value2, color = age)) +\n  geom_line() +\n  facet_wrap( ~ sex) +\n  labs(x = NULL, y = \"Count in 1000s\")\n\n# Shiny app\n\ncards <- list(\n  card(\n    full_screen = TRUE,\n    card_header(\"Somatic sector\"),\n    plotOutput(\"soma\")\n  ),\n  card(\n    full_screen = TRUE,\n    card_header(\"Psychiatric sector\"),\n    plotOutput(\"psych\")\n  ),\n  card(\n    full_screen = TRUE,\n    card_header(\"Both sectors\"),\n    plotOutput(\"somapsych\")\n  )\n)\n\nmeasure <- varSelectInput(\n  \"measure\", \"Measure\",\n  distinct(df$measure),\n  selected = NULL\n)\n\nplot_sector <- function(data, sector_label) {\n  data_sector <- data |> filter(sector == sector_label)\n  req(nrow(data_sector) > 0)  # show nothing if that sector isn't present\n\n  ggplot(data_sector, aes(x = year, y = value, color = age)) +\n    geom_line() +\n    geom_point() +\n    facet_wrap(~ sex, nrow = 2) +\n    theme(\n      plot.title = element_blank(),\n      legend.position = \"bottom\",\n    ) +\n    labs(\n      title = sector_label,\n      x = NULL, color = \"Age\",\n      y = NULL\n    ) +\n    theme_bw(base_size = 12)\n}\n\nmeasures <- df |>\n  distinct(measure) |>\n  arrange(measure) |>\n  pull(measure)\n\nui <- page_sidebar(\n  title = \"Hospital stays — dashboard\",\n  sidebar = tagList(\n    selectInput(\"measure\", \"Measure\", choices = measures, selected = measures[1]),\n    helpText(\"All plots update to the selected measure.\"),\n    helpText(\"Lines = time\"),\n    helpText(\"Color = age\"),\n    helpText(\"Facets = sex\"),\n    helpText(\"Data has been supplied by Statistics Denmark (table SBR04), which contains aggregate data on hospital usage in Denmark between 2017-2024.\")\n  ),\n  # 3 cards side-by-side (wraps on narrow screens)\n  layout_columns(width = 1,\n     card(\n       full_screen = TRUE,\n       card_header(\"Somatic\"),\n       plotOutput(\"plot_somatic\", height = 300)\n     ),\n     card(\n       full_screen = TRUE,\n       card_header(\"Psychiatric\"),\n       plotOutput(\"plot_psychiatric\", height = 300)\n     ),\n     card(\n       full_screen = TRUE,\n       card_header(\"Both\"),\n       plotOutput(\"plot_both\", height = 300)\n     )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Filter once by measure; reuse for all sectors\n  dat_measure <- reactive({\n    req(input$measure)\n    df |> filter(measure == input$measure)\n  })\n\n  output$plot_somatic     <- renderPlot(plot_sector(dat_measure(), sector_label = \"Somatic\"))\n  output$plot_psychiatric <- renderPlot(plot_sector(dat_measure(), sector_label = \"Psychiatry\"))\n  output$plot_both        <- renderPlot(plot_sector(dat_measure(), sector_label = \"Both somatic and psychiatry\"))\n\n}\n\nshinyApp(ui, server)\n\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}