{"title":"Using R functions on medstat data","markdown":{"yaml":{"title":"Using R functions on medstat data","author":"Henrik Vitus Bering Laursen","date":"2024-09-20","categories":["code","analysis","exploration","functions","cost","drugs"],"image":"thumbnail.png","freeze":true},"headingText":"Purpose","containsRefs":false,"markdown":"\n\n\nI want to follow up the previous post, and the promise of showing how to put it all in to a function.\n\nAs has been written before [here](https://x.com/drob/status/928447584712253440?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E928447584712253440%7Ctwgr%5Efce88d861cd9de805481a26a56bb6e7100e8dbb3%7Ctwcon%5Es1_c10&ref_url=http%3A%2F%2Fvarianceexplained.org%2Fr%2Fstart-blog%2F), if you do something several times in R, you might as well write a function.\n\nSo I am going to condense the code I wrote for the purpose of presenting turnover for some diabetes drug classes in the previous post, and turn it in to a function.\n\n## Turning it into a function\n\nSo, I don't need to take all of the code from the previous post, just what I need for the function. I also slim the data down a bit with the [`select()`](https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html) function.\n\n```{r}\n#| warning: false\nlibrary(tidyverse)\n\nprocess_atc_data <- function(year, url) {\n  # Read the dataset directly from the URL\n  df <- read_delim(url, delim = \";\")  # Assuming the file is semicolon-delimited\n  \n  # Attach column names\n  colnames(df) <- c(\"atc\",\"year\",\"sector\",\"region\",\"sex\",\"agegroup\",\"count_persons\",\n                        \"count_persons_per1kpop\",\"turnover\",\"reimbursement\", \n                        \"sold_amount\", \"sold_amount_1kpop_day\", \"personreferabledata_perc\")\n  \n  # the column with missing values messes stuff up\n  colnames(df)[is.na(colnames(df))] <- \"missing_name\"\n  df <- df |>  select(-missing_name)\n  \n  # Filter the dataset to get only what I need\n  df_filtered <- df %>%\n    filter(str_detect(agegroup, \"-\") & str_starts(atc, \"A10\")) |> \n    select(atc,year,agegroup,turnover)\n  \n  # Define drug classes\n  DCs <- c(\"A10BJ\", \"A10BK\", \"A10BH\", \"A10BA\", \"A10BB\", \"A10BG\", \"A10BX\", \"A10A\")\n  \n  # Further filter and add a new drug class variable\n  df_filtered <- df_filtered %>%\n    filter(atc %in% DCs) %>%\n    mutate(\n      DC = case_when(\n        atc == \"A10BJ\" ~ \"GLP1\",\n        atc == \"A10BK\" ~ \"SGLT2\",\n        atc == \"A10BH\" ~ \"DPP4\",\n        atc == \"A10BA\" ~ \"Metformin\",\n        atc == \"A10BB\" ~ \"SU\",\n        atc == \"A10BG\" ~ \"Thiazo\",\n        atc == \"A10BX\" ~ \"Others\",\n        atc == \"A10A\"  ~ \"INSULIN\",\n        TRUE ~ NA_character_\n      ),\n      turnover1000k = turnover / 1000  # Turnover in 1000k units\n    )\n  \n  # Assign the names to datasets and plots using the year variable\n  df_name <- paste0(\"df_\", year)\n  assign(df_name, df_filtered, envir = .GlobalEnv)\n  \n  # Return the processed data and the plots\n  return(list(data = df_filtered)) #, total_turnover_plot = p1, proportional_turnover_plot = p2\n}\n```\n\nI have not brought over the code for making the plots, because I aim to use the [`facet_wrap()`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) from [`ggplot2`](https://ggplot2.tidyverse.org/index.html) to make some plots where its easier to see how the turnover has developed over the years.\n\nTo achieve that, I need to append the datasets I can create with the above function.\n\n## Creating the datasets for the plots\n\nNow, I have the list of datasets and their corresponding URLs from the last post. There should be a way to automate fetching the URLs, for example by searching the site and matching the line with the dataset name and the line with the link to download it. \n\nFor now, I just use what I already found.\n\n```{r}\n# get data from years 2016-2023\nprocess_atc_data(2016,\"https://medstat.dk/da/download/file/MjAxNl9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2017,\"https://medstat.dk/da/download/file/MjAxN19hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2018,\"https://medstat.dk/da/download/file/MjAxOF9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2019,\"https://medstat.dk/da/download/file/MjAxOV9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2020,\"https://medstat.dk/da/download/file/MjAyMF9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2021,\"https://medstat.dk/da/download/file/MjAyMV9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2022,\"https://medstat.dk/da/download/file/MjAyMl9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2023,\"https://medstat.dk/da/download/file/MjAyM19hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\nActually, I could just use the [`purr::map()`](https://purrr.tidyverse.org/reference/map.html) function.\n\n```{r message = FALSE, warning = FALSE} \n# Load the purr library\nlibrary(purrr)\n\n# Define a list of URLs corresponding to each year (2016 to 2023)\nurls <- list(\n  \"2016\" = \"https://medstat.dk/da/download/file/MjAxNl9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2017\" = \"https://medstat.dk/da/download/file/MjAxN19hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2018\" = \"https://medstat.dk/da/download/file/MjAxOF9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2019\" = \"https://medstat.dk/da/download/file/MjAxOV9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2020\" = \"https://medstat.dk/da/download/file/MjAyMF9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2021\" = \"https://medstat.dk/da/download/file/MjAyMV9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2022\" = \"https://medstat.dk/da/download/file/MjAyMl9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2023\" = \"https://medstat.dk/da/download/file/MjAyM19hdGNfY29kZV9kYXRhLnR4dA==\"\n)\n\n# Vector of years you want to process\nyears <- 2016:2023\n\n# Use map to iterate over years and URLs\ndf_allyears <- map2(years, urls, process_atc_data)\n\n# Example: Access the result for a specific year\ndf_2023 <- df_allyears[[1]] # The first year of the bunch, 2016\n\n# Combine all the datasets into one - and avoiding getting \"$\" in all the the variable names while doing it\ndf_allyears <- bind_rows(df_allyears)\ndf_allyears <- map(df_allyears, as_tibble)\ndf_allyears <- bind_rows(df_allyears)\n```\n\nThis is using even less space (if you look past the part about defining a list of URLs). *I swear, I do not know why i need to repeat the bind rows function for it to work*.\n\n## Making the plots\n\nNow that we have a combined dataset, `df_allyears`, with all the data to recreate the plots from the last post, we can try to make a plot. Let's see if `facet_wrap()` makes a reasonable graph with all eight years.\n\n```{r}\n# Making the base graph to add unto \np_base <- ggplot(df_allyears, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\")\n\n# Just seeing how it looks with ALL data summarised over the years\np_base + geom_bar(stat = \"identity\")\np_base + geom_bar(stat = \"identity\", position = \"fill\")\n\n# Testing facet_wrap on the total turnover\np_base + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year)\np_base + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year)\n  \n```\n\nNow, that is a LOT of information squeezed down on little space. So lets subset it and do the `facetwrap()` on four years at a time.\n\n```{r}\n# Subset the data\ndf_early <- df_allyears |> \n  filter(year < 2020)\ndf_late <- df_allyears |> \n  filter(year >= 2020)\n\n# Now for the graphs\n  # New bases\np_base_early <- ggplot(df_early, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\")\np_base_late <- ggplot(df_late, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\")\n\n  # New graphs\n    # Early\np_base_early + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year)\np_base_early + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year)\n    # Late\np_base_late + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year)\np_base_late + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year)\n\n```\n\nOk, but we can do this better, making it more easily comparable by having the same y-axis on both the early and late dataset.\n\n```{r}\np_base_early <- ggplot(df_early, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\") \np_base_late <- ggplot(df_late, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\") \n\n  # New graphs\n    # Early\np_base_early + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year) + ylim(0,7500)\np_base_early + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year) \n    # Late\np_base_late + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year) + ylim(0,7500)\np_base_late + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year) +\n  labs(y = \"\", x = \"\")\nggsave(\"thumbnail.png\", plot = last_plot(), width = 6, height = 4) # saving p_base_late as thumbnail\n```\n\n## Commenting on the output\n\nSo, the graphs overwhelmingly show a tremendous increase in the spending on GLP1.\n\nWhere insulin in the early period of 2016-2019 rivaled or was higher than GLP1, in the late period, GLP1 completely overshadows all other drugs within the chosen classes.\n\nBetween 2022 and 2023 there seem to be a doubling of the turnover. Turnover typically represents the overall revenue generated in the pharmacy sector. \n\nThis can mean both increased spending, and increased prices. We will look at that in the next post.","srcMarkdownNoYaml":"\n\n## Purpose\n\nI want to follow up the previous post, and the promise of showing how to put it all in to a function.\n\nAs has been written before [here](https://x.com/drob/status/928447584712253440?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E928447584712253440%7Ctwgr%5Efce88d861cd9de805481a26a56bb6e7100e8dbb3%7Ctwcon%5Es1_c10&ref_url=http%3A%2F%2Fvarianceexplained.org%2Fr%2Fstart-blog%2F), if you do something several times in R, you might as well write a function.\n\nSo I am going to condense the code I wrote for the purpose of presenting turnover for some diabetes drug classes in the previous post, and turn it in to a function.\n\n## Turning it into a function\n\nSo, I don't need to take all of the code from the previous post, just what I need for the function. I also slim the data down a bit with the [`select()`](https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html) function.\n\n```{r}\n#| warning: false\nlibrary(tidyverse)\n\nprocess_atc_data <- function(year, url) {\n  # Read the dataset directly from the URL\n  df <- read_delim(url, delim = \";\")  # Assuming the file is semicolon-delimited\n  \n  # Attach column names\n  colnames(df) <- c(\"atc\",\"year\",\"sector\",\"region\",\"sex\",\"agegroup\",\"count_persons\",\n                        \"count_persons_per1kpop\",\"turnover\",\"reimbursement\", \n                        \"sold_amount\", \"sold_amount_1kpop_day\", \"personreferabledata_perc\")\n  \n  # the column with missing values messes stuff up\n  colnames(df)[is.na(colnames(df))] <- \"missing_name\"\n  df <- df |>  select(-missing_name)\n  \n  # Filter the dataset to get only what I need\n  df_filtered <- df %>%\n    filter(str_detect(agegroup, \"-\") & str_starts(atc, \"A10\")) |> \n    select(atc,year,agegroup,turnover)\n  \n  # Define drug classes\n  DCs <- c(\"A10BJ\", \"A10BK\", \"A10BH\", \"A10BA\", \"A10BB\", \"A10BG\", \"A10BX\", \"A10A\")\n  \n  # Further filter and add a new drug class variable\n  df_filtered <- df_filtered %>%\n    filter(atc %in% DCs) %>%\n    mutate(\n      DC = case_when(\n        atc == \"A10BJ\" ~ \"GLP1\",\n        atc == \"A10BK\" ~ \"SGLT2\",\n        atc == \"A10BH\" ~ \"DPP4\",\n        atc == \"A10BA\" ~ \"Metformin\",\n        atc == \"A10BB\" ~ \"SU\",\n        atc == \"A10BG\" ~ \"Thiazo\",\n        atc == \"A10BX\" ~ \"Others\",\n        atc == \"A10A\"  ~ \"INSULIN\",\n        TRUE ~ NA_character_\n      ),\n      turnover1000k = turnover / 1000  # Turnover in 1000k units\n    )\n  \n  # Assign the names to datasets and plots using the year variable\n  df_name <- paste0(\"df_\", year)\n  assign(df_name, df_filtered, envir = .GlobalEnv)\n  \n  # Return the processed data and the plots\n  return(list(data = df_filtered)) #, total_turnover_plot = p1, proportional_turnover_plot = p2\n}\n```\n\nI have not brought over the code for making the plots, because I aim to use the [`facet_wrap()`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) from [`ggplot2`](https://ggplot2.tidyverse.org/index.html) to make some plots where its easier to see how the turnover has developed over the years.\n\nTo achieve that, I need to append the datasets I can create with the above function.\n\n## Creating the datasets for the plots\n\nNow, I have the list of datasets and their corresponding URLs from the last post. There should be a way to automate fetching the URLs, for example by searching the site and matching the line with the dataset name and the line with the link to download it. \n\nFor now, I just use what I already found.\n\n```{r}\n# get data from years 2016-2023\nprocess_atc_data(2016,\"https://medstat.dk/da/download/file/MjAxNl9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2017,\"https://medstat.dk/da/download/file/MjAxN19hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2018,\"https://medstat.dk/da/download/file/MjAxOF9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2019,\"https://medstat.dk/da/download/file/MjAxOV9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2020,\"https://medstat.dk/da/download/file/MjAyMF9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2021,\"https://medstat.dk/da/download/file/MjAyMV9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2022,\"https://medstat.dk/da/download/file/MjAyMl9hdGNfY29kZV9kYXRhLnR4dA==\") \nprocess_atc_data(2023,\"https://medstat.dk/da/download/file/MjAyM19hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\nActually, I could just use the [`purr::map()`](https://purrr.tidyverse.org/reference/map.html) function.\n\n```{r message = FALSE, warning = FALSE} \n# Load the purr library\nlibrary(purrr)\n\n# Define a list of URLs corresponding to each year (2016 to 2023)\nurls <- list(\n  \"2016\" = \"https://medstat.dk/da/download/file/MjAxNl9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2017\" = \"https://medstat.dk/da/download/file/MjAxN19hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2018\" = \"https://medstat.dk/da/download/file/MjAxOF9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2019\" = \"https://medstat.dk/da/download/file/MjAxOV9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2020\" = \"https://medstat.dk/da/download/file/MjAyMF9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2021\" = \"https://medstat.dk/da/download/file/MjAyMV9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2022\" = \"https://medstat.dk/da/download/file/MjAyMl9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2023\" = \"https://medstat.dk/da/download/file/MjAyM19hdGNfY29kZV9kYXRhLnR4dA==\"\n)\n\n# Vector of years you want to process\nyears <- 2016:2023\n\n# Use map to iterate over years and URLs\ndf_allyears <- map2(years, urls, process_atc_data)\n\n# Example: Access the result for a specific year\ndf_2023 <- df_allyears[[1]] # The first year of the bunch, 2016\n\n# Combine all the datasets into one - and avoiding getting \"$\" in all the the variable names while doing it\ndf_allyears <- bind_rows(df_allyears)\ndf_allyears <- map(df_allyears, as_tibble)\ndf_allyears <- bind_rows(df_allyears)\n```\n\nThis is using even less space (if you look past the part about defining a list of URLs). *I swear, I do not know why i need to repeat the bind rows function for it to work*.\n\n## Making the plots\n\nNow that we have a combined dataset, `df_allyears`, with all the data to recreate the plots from the last post, we can try to make a plot. Let's see if `facet_wrap()` makes a reasonable graph with all eight years.\n\n```{r}\n# Making the base graph to add unto \np_base <- ggplot(df_allyears, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\")\n\n# Just seeing how it looks with ALL data summarised over the years\np_base + geom_bar(stat = \"identity\")\np_base + geom_bar(stat = \"identity\", position = \"fill\")\n\n# Testing facet_wrap on the total turnover\np_base + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year)\np_base + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year)\n  \n```\n\nNow, that is a LOT of information squeezed down on little space. So lets subset it and do the `facetwrap()` on four years at a time.\n\n```{r}\n# Subset the data\ndf_early <- df_allyears |> \n  filter(year < 2020)\ndf_late <- df_allyears |> \n  filter(year >= 2020)\n\n# Now for the graphs\n  # New bases\np_base_early <- ggplot(df_early, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\")\np_base_late <- ggplot(df_late, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\")\n\n  # New graphs\n    # Early\np_base_early + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year)\np_base_early + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year)\n    # Late\np_base_late + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year)\np_base_late + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year)\n\n```\n\nOk, but we can do this better, making it more easily comparable by having the same y-axis on both the early and late dataset.\n\n```{r}\np_base_early <- ggplot(df_early, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\") \np_base_late <- ggplot(df_late, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\") \n\n  # New graphs\n    # Early\np_base_early + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year) + ylim(0,7500)\np_base_early + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year) \n    # Late\np_base_late + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year) + ylim(0,7500)\np_base_late + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year) +\n  labs(y = \"\", x = \"\")\nggsave(\"thumbnail.png\", plot = last_plot(), width = 6, height = 4) # saving p_base_late as thumbnail\n```\n\n## Commenting on the output\n\nSo, the graphs overwhelmingly show a tremendous increase in the spending on GLP1.\n\nWhere insulin in the early period of 2016-2019 rivaled or was higher than GLP1, in the late period, GLP1 completely overshadows all other drugs within the chosen classes.\n\nBetween 2022 and 2023 there seem to be a doubling of the turnover. Turnover typically represents the overall revenue generated in the pharmacy sector. \n\nThis can mean both increased spending, and increased prices. We will look at that in the next post."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":4,"self-contained":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","editor":"source","theme":"darkly","fontsize":"0.9em","title-block-banner":true,"toc-location":"right","toc-title":"On this page","title":"Using R functions on medstat data","author":"Henrik Vitus Bering Laursen","date":"2024-09-20","categories":["code","analysis","exploration","functions","cost","drugs"],"image":"thumbnail.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}