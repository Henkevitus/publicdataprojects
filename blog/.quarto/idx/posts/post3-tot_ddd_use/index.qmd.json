{"title":"Evolution in DDD use of Diabetes Drugs over time","markdown":{"yaml":{"title":"Evolution in DDD use of Diabetes Drugs over time","author":"Henrik Vitus Bering Laursen","date":"2024-09-30","categories":["code","analysis","exploration","cost","drugs"],"image":"thumbnail.png","freeze":true},"headingText":"Drug utilisation over time","containsRefs":false,"markdown":"\n\n\nMy two previous posts examined data available from [medstat](medstat.dk) and were focused on those datasets and specifically the turnover of specific drug classes.\n\nHere, I wish to demonstrate a different type of publicly available data, still related to prescription data.\n\nThis is data regarding drug prices, and can be found on The Danish Health Data Authority's website [here](https://www.esundhed.dk/Emner/Laegemidler/Medicinpriser).\n\nDanish drug prices are by and large renegotiated every 14 days. Therefore, the dataset is updated accordingly. I will use the data from the most [recent update](https://www.esundhed.dk/-/media/Files/Publikationer/Emner/Laegemidler/Medicinpriser/2024/lmpriser_eSundhed_240916.ashx) as of the start of making this post.\n\nLooking at it post hoc, I used the following packages:\n\n```{r}\n#| warning: false\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(httr)\nlibrary(stringr)\nlibrary(extrafont)\n# install.packages(\"ggpubr\")\n# library(gridExtra)\n# library(ggpubr)\n```\n\n### Fetching the data\n\nI had some initial trouble figuring out how to download the file. What kept me from figuring it out was not realising that the file from the [link](https://www.esundhed.dk/-/media/Files/Publikationer/Emner/Laegemidler/Medicinpriser/2024/lmpriser_eSundhed_240916.ashx) was a zip file containing an excel file.\n\nApparently, \"The extension .ashx doesn't specify the file format but rather that a server-side handler is being used to serve the content.\", as chatGPT puts it. I have no gained the understanding that .ashx is just some sort of framework that serves up the data, not a file type.\n\nThis leads to the following code necessary to download the data. Code is just for show.\n\n```{r}\n#| eval: false\n# URL of the .ashx file \nurl <- \"https://www.esundhed.dk/-/media/Files/Publikationer/Emner/Laegemidler/Medicinpriser/2024/lmpriser_eSundhed_240916.ashx\"\n\n# Define a path in my local datafolder, used as described in the first post about medstat data\ndatapath <- \"C:/Users/henri/Documents/data-publicdataprojects\"\n\n# Define the path where the ZIP file will be saved\nzip_destfile <- paste0(datapath,\"lmpriser_eSundhed_240916.zip\")\n\n# Download the ZIP file\ndownload.file(url, zip_destfile, mode = \"wb\")\n\n# Unzip the file\nunzip(zip_destfile, exdir = paste0(datapath,\"unzipped_files\"))\n\n# Check the unzipped files\nlist.files(paste0(datapath,\"unzipped_files\"))\n\n# check which sheet to import from the excel file\nsheet_names <- excel_sheets(paste0(datapath,\"unzipped_files/lmpriser_eSundhed_240916.xlsx\"))\n```\n\nAnd then I import the file:\n\n```{r}\n# Read the excel file\ndatapath <- \"C:/Users/henri/Documents/data-publicdataprojects\"\ndf_ddd <- read_excel(paste0(datapath,\"unzipped_files/lmpriser_eSundhed_240916.xlsx\"), sheet = \"lmpriser_eSundhed_240916\")\n\nhead(df_ddd)\n```\n\n### Cleaning the data\n\nJust as the post, I want to focus on drugs used for diabetes. So I keep only the observations with A10A and A10B:\n\n```{r}\n# Cleaning it in one set of operations\ndf_ddd_A10 <- df_ddd |> \n# Filter for just A10A and A10B, and keep just prp per ddd \n  filter(\n    str_detect(ATC,(\"^A10B\")) | str_detect(ATC,(\"^A10A\")), \n    Indikator == \"AUP_pr_DDD\") |> \n  # Select variables\n  select(ATC, Indholdsstof, Lægemiddel, starts_with(\"20\")) |>\n  # Pivot the data so that the variable columns that contain time are contained in one variable column\n  pivot_longer(\n    cols = starts_with(\"20\"),\n    names_to = \"Tid\",\n    values_to = \"prpddd\") |> \n  mutate(\n    Tid = ymd(Tid)) |>\n  # group_by(tid) |>  DELETE??\n  # mutate(\n  #   hip_ddd = max(prpddd), # hip_ddd = maxpris per ddd\n  #   lop_ddd = min(prpddd) # lop_ddd = minpris per ddd\n  # ) |> \n  # ungroup() |> \n  filter(\n    !is.na(prpddd)\n  )\n\n# And translate the colnames to english for good measure\nhead(df_ddd_A10)\ncolnames(df_ddd_A10) <- c(\n  \"atc\",\n  \"compound\",\n  \"product\",\n  \"time\",\n  \"prpddd\" # Pharmacy Retail Price DDD\n)\nhead(df_ddd_A10)\n```\n\n### Prepping data for plotting\n\nThe resulting dataset is one with all registered Pharmacy Retail Price per Defined Daily Dose (PRP per DDD) of Drugs in the A10 ATC category, from between `{r} min(df_ddd_A10$time)` and `{r} max(df_ddd_A10$time)`. In other words: from the past `{r} as.numeric(difftime(max(df_ddd_A10$time), min(df_ddd_A10$time), units = \"days\")) / 365.25` years.\n\nThis is basically a measure of how much it costs to treat a person with the medication with a standard dose, each day, and can be used to compare how much each drug costs to use for treatment. This is used because it can be difficult to compare drugs based on redeemed prescriptions or prices, as some drugs are prescribed differently than others. Also, some drugs have absurdly high prices per pill, as some specialised drugs in oncology and opthalmology, compared to very cheap generic pain killers.\n\nThis is exemplified in the code below.\n\n```{r}\ndf_ddd_test <- df_ddd |> \n  filter(Indikator == \"AUP\") |> # AUP = Pharmacy Retail Price\n  pivot_longer(\n    cols = starts_with(\"20\"),\n    names_to = \"Tid\",\n    values_to = \"prp\"\n    ) |> \n    summarise(\n    highest_prp = max(prp, na.rm = TRUE),\n    lowest_prp = min(prp, na.rm = TRUE)\n  )\ndf_ddd_test\n```\n\nI want to present the numbers with inline code, and this can be done easily with the basic R function `format()` and `cat()` which can format the numeric value and concatenate the text.\n\n```{r}\n# Format the numbers in base R\nformatted_highest_prp <- format(df_ddd_test$highest_prp, big.mark = \",\", scientific = FALSE)\nformatted_lowest_prp <- format(df_ddd_test$lowest_prp, big.mark = \",\", scientific = FALSE)\n\n# Print the formatted numbers\ncat(\"Highest AUP:\", formatted_highest_prp, \"DKK\\n\")\ncat(\"Lowest AUP:\", formatted_lowest_prp, \"DKK\\n\")\n```\n\nBelow, the numbers are generated with inline code:\n\nThe highest Pharmacy Retail Price is `{r} cat(\"Highest AUP:\", formatted_highest_prp, \"DKK\\n\")`, and the lowest is `{r} cat(\"Lowest AUP:\", formatted_lowest_prp, \"DKK\\n\")`, which is QUITE a difference.\n\n### Making a plot\n\nNow, back to the retail price per DDD of diabetes drugs. Just as a visual aid, lets compare the most expensive to the cheapest, of the diabetes drugs.\n\nBut before that, a useful thing I picked up from [Meghan Hall's blog](https://meghan.rbind.io/), is putting a consistent theme on your plots. This can be done as below.\n\n```{r}\nlibrary(gghighlight)\nlibrary(scales)\nlibrary(ggtext)\nlibrary(ggrepel)\n\nhen_theme <- function () { \n  theme_linedraw(base_size=11) %+replace%  \n    theme(\n      panel.background  = element_blank(),\n      plot.background = element_rect(fill = \"white\", color = NA), \n      legend.background = element_rect(fill = \"white\", color = NA),\n      legend.key = element_rect(fill = \"white\", color = NA),\n      axis.ticks = element_blank(),\n      panel.grid.major = element_line(color = \"grey90\", size = 0.3), \n      panel.grid.minor = element_blank(),\n      plot.title.position = \"plot\",\n      plot.title = element_text(size = 16, hjust = 0, vjust = 0.5, \n                                margin = margin(b = 0.2, unit = \"cm\")),\n      plot.subtitle = element_text(size = 10, hjust = 0, vjust = 0.5, \n                                   margin = margin(b = 0.4, unit = \"cm\")),\n      plot.caption = element_text(size = 7, hjust = 1, face = \"italic\", \n                                  margin = margin(t = 0.1, unit = \"cm\")),\n      axis.text.x = element_text(size = 13),\n      axis.text.y = element_text(size = 13)\n    )\n}\n```\n\n<!-- fuld linje theme_linedraw(base_size=11, base_family=\"Calibri\") %+replace%. Gider ikke loade en masse fancy fonts. ikke så vigtigt. Det er besværligt men https://towardsdev.com/simple-guide-changing-fonts-in-ggplot2-with-extrafont-8f5100855f4 kan bruges. -->\n\nThe \"hen_theme\" is then added to future plots, at the end.\n\n```{r}\n# find most expensive \ndf_ddd_A10 |> \n  group_by(atc) |> \n  summarise(\n    highest_prpddd = max(prpddd, na.rm = TRUE),\n    lowest_prpddd = min(prpddd, na.rm = TRUE)\n  ) |>   \n  summarise(\n    most_expensive_atc = atc[which.max(highest_prpddd)],\n    most_expensive_value = max(highest_prpddd),\n    least_expensive_atc = atc[which.min(lowest_prpddd)],\n    least_expensive_value = min(lowest_prpddd)\n  )\n\n# plot\nhilo_ddd <- df_ddd_A10 |> \n  filter(atc == \"A10BX16\" | atc == \"A10BB12\") |> \n  select(compound,time,prpddd)\n  \nggplot(hilo_ddd, mapping = aes(x=time,y=prpddd, colour = compound)) +\n  geom_point() +\n  labs(\n    title = \"Cheapest and most expensive A10 drugs\",\n    subtitle = \"by Pharmacy Retail Price per DDD\",\n    y = \"Pharmacy Retail Price per DDD\",\n    x = \"\",\n  ) +\n  hen_theme() + \n  theme(\n    legend.title = element_blank(),\n    legend.position = c(0.8,0.9),\n    legend.background = element_rect(fill= \"white\")\n    )\n```\n\nThis plot tells us that the two drug compounds with the highest and lowest PRP per DDD are Glimepiride, of the [sulfonyurea](https://en.wikipedia.org/wiki/Sulfonylurea) class, and Tirzepatide, a [GIP](https://en.wikipedia.org/wiki/Gastric_inhibitory_polypeptide_receptor) and [GLP1](https://en.wikipedia.org/wiki/GLP-1_receptor_agonist) combination.\n\nNow, I wish to visualise how PRP per DDD changes over time. Below, I create the variables for the minimum and maximum values for each compound.\n\n```{r}\n# Make a new var thats floored to months and find the min for each month\ndf_ddd_A10_minmax <- df_ddd_A10 |> \n  mutate(month = floor_date(time,\"month\")) |> \n  group_by(month, atc, compound) |> \n  summarise(\n    a_min_prpddd = min(prpddd, na.rm = TRUE), # \"a_\" is to make it first in the facetwrap later \n    b_max_prpddd = max(prpddd, na.rm = TRUE)) |> \n  ungroup()\n\nhead(df_ddd_A10_minmax)\n```\n\nAnd now for the grand plot I have planned for this post, which will be an overview of the PRP per DDD for the main drug classes in diabetes type 2 treatment.\n\nFirst, I limit the dataset to only encompass the classes I want to look at.\n\n```{r}\ndfforplot <- df_ddd_A10_minmax |> \n  filter(\n    str_detect(atc,\"^A10BA\") |   # met\n      str_detect(atc,\"^A10BB\") | # sul\n      str_detect(atc,\"^A10BK\") | # sglt2\n      str_detect(atc,\"^A10BJ\") | # glp1\n      str_detect(atc,\"^A10BH\") | # dpp4\n      str_detect(atc,\"^A10BX16\") # tirzepatid, honoured guest\n    )  \n\n```\n\nThen, I try to make the plots which contain a surmountable amount of information.\n\n```{r}\n# Minimum values plot\nplotmin <- ggplot(dfforplot) +\n  geom_line(aes(x = month, y = a_min_prpddd, colour = compound), linewidth = 0.8) +\n  labs(title = \"Minimum PRP per DDD Over Time\",\n       x = \"\",\n       y = \"PRP per DDD\",\n       colour = \"Drug\") +\n  hen_theme()\n# Max\nplotmax <- ggplot(dfforplot) +\n  geom_line(aes(x = month, y = b_max_prpddd, colour = compound), linewidth = 0.8) +\n  labs(title = \"Maximum PRP per DDD Over Time\",\n       x = \"\",\n       y = \"PRP per DDD\",\n       colour = \"Drug\") +\n  hen_theme()\n\nplotmin\nplotmax\n```\n\nNow that is quite the jumble of lines.\n\nI want to do the following:\n\n-   Create a more meaningful colour representation\n-   Look at the outliers separately from the ones staying below 50 and 100, respectively.\n\nFirst, meaningful colour representation.\n\nThe exact amount of different compounds within each class can be found via the code below.\n\n```{r}\ndfforplot |> group_by(atc) |> distinct(compound)\n```\n\nNow we can setup a vector with colour mapping using the output from above. Copy and paste it into a text editor to convert it to something useful. There are probably smarter ways to use that output.\n\n```{r}\n# prep colour scheme for drugs\n\ncolour_mapping <- c(\n  # Unique drug\n  \"Metformin\"       = \"#000000\",  # Deep Blue (for uniqueness)\n\n  # Sulfonylureas (reddish colors)\n  \"Glibenclamid\"    = \"#d62728\",  # Red\n  \"Glipizid\"        = \"#e37777\",  # Light Red\n  \"Gliclazid\"       = \"#c13515\",  # Darker Red\n  \"Glimepirid\"      = \"#ff6347\",  # Tomato Red\n\n  # DPP-4 inhibitors (greenish colors)\n  \"Sitagliptin\"     = \"#2ca02c\",  # Green\n  \"Vildagliptin\"    = \"#98df8a\",  # Light Green\n  \"Saxagliptin\"     = \"#34a56f\",  # Teal Green\n  \"Alogliptin\"      = \"#57a774\",  # Medium Green\n  \"Linagliptin\"     = \"#1e7f5f\",  # Dark Green\n\n  # GLP-1 receptor agonists (bluish colors)\n  \"Exenatid\"        = \"#1f77b4\",  # Deep Blue\n  \"Liraglutid\"      = \"#5b9bd5\",  # Light Blue\n  \"Lixisenatid\"     = \"#6495ed\",  # Cornflower Blue\n  \"Dulaglutid\"      = \"#4682b4\",  # Steel Blue\n  \"Semaglutid\"      = \"#4169e1\",  # Royal Blue\n\n  # SGLT2 inhibitors (yellowish and brownish colors)\n  \"Dapagliflozin\"   = \"#ffd700\",  # Gold\n  \"Canagliflozin\"   = \"#e5b33f\",  # Dark Yellow\n  \"Empagliflozin\"   = \"#d9a120\",  # Mustard\n  \"Ertugliflozin\"   = \"#b8860b\",  # Dark Goldenrod\n\n  # Tirzepatide (distinct color)\n  \"Tirzepatid\"      = \"#8b008b\"   # Dark Magenta\n)\n\n```\n\n```{=html}\n<!-- \nMaybe change line shapes, see ggplot index - \naes_linetype_size_shape {ggplot2} ..\n\nThen i make geom-lines for each atc group ? -->\n```\n\nNow to look at the ones who are not outliers separately to see if the graph is visually meaningful.\n\n```{r}\ntestplot1 <- ggplot(dfforplot |> filter(a_min_prpddd<100), aes(x = month, y = a_min_prpddd, colour = compound)) +\n  geom_line() +\n  scale_colour_manual(values = colour_mapping) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(title = \"Minimum Pharmacy Retail Price per DDD, in DKK\",\n       x = \"\",\n       y = \"\",\n       colour = \"Drug\") +\n  hen_theme() \n\ntestplot1\n```\n\nFirst of all, this is a mess. In addition to looking at the outliers separately, I want to do the following:\n\n1.  Sort the legend according to drug class (atc codes)\n2.  Reduce the amount of compounds included\n\nFor (1), y'all need to hold on for dear life because this stuff is an amalgamation of what I have done in my PhD combined with some new things. I will have to explain each part of the code in great detail to even remember how this works.\n\n*The explanations are maybe mostly for me*.\n\nTo achieve that, I will firstly make a variable with a label for each drug class. Then, I will order the compound variable by the class variable. Then I apply cus tom colours to the compound variable.\n\nThe first part is relatively simply done using `case_when()` and knowledge of what classes the ATC codes represent.\n\n```{r}\ndfforplot <- dfforplot |> \n  mutate(class = case_when(\n    substr(atc, 1, 5) == \"A10BA\" ~ \"Metformin\",\n    substr(atc, 1, 5) == \"A10BB\" ~ \"Sulfonylureas\",\n    substr(atc, 1, 5) == \"A10BH\" ~ \"DPP4\",\n    substr(atc, 1, 5) == \"A10BJ\" ~ \"GLP1\",\n    substr(atc, 1, 5) == \"A10BK\" ~ \"SGLT2\",\n    substr(atc, 1, 5) == \"A10BX\" ~ \"Tirzepatide\",\n    TRUE ~ \"Other\"  # For any other unclassified codes\n  ))\n```\n\nFor the second part, I set the order I want, turn the `class` variable into a factor, and then `arrange()` the compounds within each class according to this order. Finally, I turn the compound variable into a factor that is ordered by its unique levels, which correspond to the classes, and check that `compound` has the correct order.\n\n```{r}\nclass_order <- c(\"Metformin\", \"Sulfonylureas\", \"DPP4\", \"GLP1\", \"SGLT2\", \"Tirzepatide\")\ndfforplot <- dfforplot |>\n  mutate(class = factor(class, levels = class_order))  |>\n  arrange(class, compound) |>\n  mutate(compound = factor(compound, levels = unique(compound)))\nprint(levels(dfforplot$compound))\n```\n\nThe third part is simply remembering the order of classes, and how many compounds are within each class, and then creating a selection of colours via the `colorRampPallette()` function, and then store that in the object `colours_compunds`, to use in the plot.\n\n```{r}\nmet_colours  <- colorRampPalette(c(\"black\"))(1)\nsu_colours  <- colorRampPalette(c(\"pink\",\"darkred\"))(4)\ndpp4_colours   <- colorRampPalette(c(\"green\",\"darkgreen\"))(5) # NB THIS WORKS BECAUSE THE FIRST 5 ARE DPP4, 6 are GLP1, etc etc.\nglp1_colours   <- colorRampPalette(c(\"lightblue\",\"darkblue\"))(5)\nsglt2_colours  <- colorRampPalette(c(\"yellow\",\"#b8860b\"))(4)\ntir_colours  <- colorRampPalette(c(\"#8b008b\"))(1)\ncolours_compounds <- c(met_colours,\n                su_colours,\n                dpp4_colours,  \n                glp1_colours,\n                sglt2_colours,\n                tir_colours) # combine\nbarplot(rep(1,20), col=colours_compounds, border = \"white\", axes = FALSE)\n```\n\nFor (2), I will focus on the three most sold compounds in the latest year and remove the rest to avoid cluttering the plot with information. \n\nI use [Medstat](https://medstat.dk/) as a source, and what I look for is DDD sold in total across the entire healthcare sector, which is incredible easy to extract from the site. The amounts are from when I viewed the site in October 2024. Below, I store a vector of the most three most used compounds (less if class has less compounds).\n\n```{r}\nkept_compounds <- c(\n  \"Metformin\", \n  \"Glipizid\",\n  \"Gliclazid\",\n  \"Glimepirid\",\n  \"Sitagliptin\",\n  \"Vildagliptin\",\n  \"Linagliptin\",\n  \"Liraglutid\",\n  \"Dulaglutid\",\n  \"Semaglutid\",\n  \"Dapagliflozin\",\n  \"Canagliflozin\",\n  \"Empagliflozin\",\n  \"Tirzepatid\"  \n)\n```\n\nNow, lets make plots for the ones that are not outliers. In practice I will do that by just limiting the y axis.\n\n```{r}\ndfforplot |> \n  filter(a_min_prpddd<100\n         & compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = a_min_prpddd, colour = compound)) +\n  geom_line() +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(title = \"Minimum Pharmacy Retail Price per DDD, in DKK\",\n       x = \"\",\n       y = \"\",\n       colour = \"Drug\") +\n  hen_theme() \n```\n\n**Oops**, I messed up. The colours do not fit anymore. Will fit the colours to the new more limited amount of compounds.\n\n```{r}\nmet_colours  <- colorRampPalette(c(\"black\"))(1)\nsu_colours  <- colorRampPalette(c(\"pink\",\"darkred\"))(3)\ndpp4_colours   <- colorRampPalette(c(\"green\",\"darkgreen\"))(3) # NB THIS WORKS BECAUSE THE FIRST 5 ARE DPP4, 6 are GLP1, etc etc.\nglp1_colours   <- colorRampPalette(c(\"lightblue\",\"darkblue\"))(3)\nsglt2_colours  <- colorRampPalette(c(\"yellow\",\"#b8860b\"))(3)\ntir_colours  <- colorRampPalette(c(\"#8b008b\"))(1)\ncolours_compounds <- c(met_colours,\n                su_colours,\n                dpp4_colours,  \n                glp1_colours,\n                sglt2_colours,\n                tir_colours) # combine\nbarplot(rep(1,15), col=colours_compounds, border = \"white\", axes = FALSE)\n```\nNow try again.\n\n```{r}\ndfforplot |> \n  filter(a_min_prpddd<100\n         & compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = a_min_prpddd, colour = compound)) +\n  geom_line() +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(title = \"Minimum Pharmacy Retail Price per DDD, in DKK\",\n       x = \"\",\n       y = \"\",\n       colour = \"Drug\") +\n  hen_theme() \n```\n\nNow that looks much better. Now let's make the final graph, using `facet_wrap()` to distinguish between the minimum and maximum PRP per DDD.\n\nTo use `facet_wrap()`, we pivot the dataset before plotting.\n\n```{r}\ndfforplot_pivot <- dfforplot |> \n  pivot_longer(\n    cols = ends_with(\"prpddd\"),\n    names_to = \"ddd\",\n    values_to = \"minmax\"\n  ) |> arrange(minmax)\n\nhead(dfforplot_pivot)\n```\n\nAnd then make the plot.\n\n```{r}\ndfforplot_pivot |> \n  filter(compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = minmax, colour = compound)) +\n  geom_line() +\n  facet_wrap(\n    ~ddd, \n    scales = \"free\",\n    labeller = labeller(ddd =\n                          c(\"a_min_prpddd\" = \"Minimum\",\n                            \"b_max_prpddd\" = \"Maximum\")\n                        )) +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(title = \"Minimum Pharmacy Retail Price per DDD, in DKK\",\n       x = \"\",\n       y = \"\",\n       colour = \"Drug\") +\n  hen_theme() \n```\n\nAnd the final, more presentable plot.\n\n```{r}\ndfforplot_pivot |> \n  filter(minmax<100\n         & compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = minmax, colour = compound)) +\n  geom_line() +\n  facet_wrap(\n    ~ddd, \n    scales = \"free\",\n    labeller = labeller(ddd =\n                          c(\"a_min_prpddd\" = \"Minimum\",\n                            \"b_max_prpddd\" = \"Maximum\")\n                        )) +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(\n    title = \"Pharmacy Retail Price per DDD, in DKK\",\n    caption = \"Outliers: Minimum Tirzepatide prices go from\",\n    x = \"\",\n    y = \"\",\n    colour = \"Drug\") +\n  hen_theme() \n```\n\nI also want to add information about the outliers on the plot.\n\n**JEG HAR GJORT DET MESTE FÆRDIGT OG VIL BARE GERNE SKRIVE DET RENT SENERE**\n\n```{r}\n# Filter the dataset for Semaglutide and Tirzepatide\nsubset_df <- dfforplot_pivot %>%\n  filter(compound %in% c(\"Semaglutid\", \"Tirzepatid\"))\n\n# Summarise the earliest, latest, highest, and lowest values for each compound\nsummary_df <- subset_df %>%\n  group_by(compound) %>%\n  summarise(\n    earliest_date = min(month),\n    latest_date = max(month),\n    highest_ddd = max(minmax),\n    lowest_ddd = min(minmax),\n    .groups = 'drop'  # Ungroup after summarising\n  )\n\n# View the resulting dataset\nprint(summary_df)\n\n# Create a caption string\ncaption_text <- paste(\n  \"Outliers were Semaglutide and Tirzepatide. Lowest PRP per DDD for Semaglutide was\",\n  \"22.6, which increased to 308 in 2024.\",\n  \"For Tirzepatide, the lowest value was 103, and increased to 522 in September of 2024.\"\n  )\n\n# Print caption for verification\nprint(caption_text)\n```\n\nDoublechecking with my older data.\n\n```{r}\ndf_ddd_A10 |> filter(str_detect(compound, \"Tirzepatid\")) |> summarise(haps = min(prpddd))\ndf_ddd_A10 |> filter(str_detect(compound, \"Tirzepatid\")) |> summarise(haps = max(prpddd))\ndf_ddd_A10 |> filter(str_detect(compound, \"Semaglutid\")) |> summarise(haps = min(prpddd))\ndf_ddd_A10 |> filter(str_detect(compound, \"Semaglutid\")) |> summarise(haps = max(prpddd))\n```\n\nSo that makes the final final plot:\n\n```{r}\ndfforplot_pivot |> \n  filter(minmax<100\n         & compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = minmax, colour = compound)) +\n  geom_line() +\n  facet_wrap(\n    ~ddd, \n    scales = \"free\",\n    labeller = labeller(ddd =\n                          c(\"a_min_prpddd\" = \"Minimum\",\n                            \"b_max_prpddd\" = \"Maximum\")\n                        )) +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(\n    title = \"Pharmacy Retail Price per DDD, in DKK\",\n    caption = caption_text,\n    x = \"\",\n    y = \"\",\n    colour = \"Drug\") +\n  hen_theme() \n\nggsave(\"thumbnail.png\", plot = last_plot(), width = 6, height = 4) # saved as thumbnail\n```\n","srcMarkdownNoYaml":"\n\n## Drug utilisation over time\n\nMy two previous posts examined data available from [medstat](medstat.dk) and were focused on those datasets and specifically the turnover of specific drug classes.\n\nHere, I wish to demonstrate a different type of publicly available data, still related to prescription data.\n\nThis is data regarding drug prices, and can be found on The Danish Health Data Authority's website [here](https://www.esundhed.dk/Emner/Laegemidler/Medicinpriser).\n\nDanish drug prices are by and large renegotiated every 14 days. Therefore, the dataset is updated accordingly. I will use the data from the most [recent update](https://www.esundhed.dk/-/media/Files/Publikationer/Emner/Laegemidler/Medicinpriser/2024/lmpriser_eSundhed_240916.ashx) as of the start of making this post.\n\nLooking at it post hoc, I used the following packages:\n\n```{r}\n#| warning: false\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(httr)\nlibrary(stringr)\nlibrary(extrafont)\n# install.packages(\"ggpubr\")\n# library(gridExtra)\n# library(ggpubr)\n```\n\n### Fetching the data\n\nI had some initial trouble figuring out how to download the file. What kept me from figuring it out was not realising that the file from the [link](https://www.esundhed.dk/-/media/Files/Publikationer/Emner/Laegemidler/Medicinpriser/2024/lmpriser_eSundhed_240916.ashx) was a zip file containing an excel file.\n\nApparently, \"The extension .ashx doesn't specify the file format but rather that a server-side handler is being used to serve the content.\", as chatGPT puts it. I have no gained the understanding that .ashx is just some sort of framework that serves up the data, not a file type.\n\nThis leads to the following code necessary to download the data. Code is just for show.\n\n```{r}\n#| eval: false\n# URL of the .ashx file \nurl <- \"https://www.esundhed.dk/-/media/Files/Publikationer/Emner/Laegemidler/Medicinpriser/2024/lmpriser_eSundhed_240916.ashx\"\n\n# Define a path in my local datafolder, used as described in the first post about medstat data\ndatapath <- \"C:/Users/henri/Documents/data-publicdataprojects\"\n\n# Define the path where the ZIP file will be saved\nzip_destfile <- paste0(datapath,\"lmpriser_eSundhed_240916.zip\")\n\n# Download the ZIP file\ndownload.file(url, zip_destfile, mode = \"wb\")\n\n# Unzip the file\nunzip(zip_destfile, exdir = paste0(datapath,\"unzipped_files\"))\n\n# Check the unzipped files\nlist.files(paste0(datapath,\"unzipped_files\"))\n\n# check which sheet to import from the excel file\nsheet_names <- excel_sheets(paste0(datapath,\"unzipped_files/lmpriser_eSundhed_240916.xlsx\"))\n```\n\nAnd then I import the file:\n\n```{r}\n# Read the excel file\ndatapath <- \"C:/Users/henri/Documents/data-publicdataprojects\"\ndf_ddd <- read_excel(paste0(datapath,\"unzipped_files/lmpriser_eSundhed_240916.xlsx\"), sheet = \"lmpriser_eSundhed_240916\")\n\nhead(df_ddd)\n```\n\n### Cleaning the data\n\nJust as the post, I want to focus on drugs used for diabetes. So I keep only the observations with A10A and A10B:\n\n```{r}\n# Cleaning it in one set of operations\ndf_ddd_A10 <- df_ddd |> \n# Filter for just A10A and A10B, and keep just prp per ddd \n  filter(\n    str_detect(ATC,(\"^A10B\")) | str_detect(ATC,(\"^A10A\")), \n    Indikator == \"AUP_pr_DDD\") |> \n  # Select variables\n  select(ATC, Indholdsstof, Lægemiddel, starts_with(\"20\")) |>\n  # Pivot the data so that the variable columns that contain time are contained in one variable column\n  pivot_longer(\n    cols = starts_with(\"20\"),\n    names_to = \"Tid\",\n    values_to = \"prpddd\") |> \n  mutate(\n    Tid = ymd(Tid)) |>\n  # group_by(tid) |>  DELETE??\n  # mutate(\n  #   hip_ddd = max(prpddd), # hip_ddd = maxpris per ddd\n  #   lop_ddd = min(prpddd) # lop_ddd = minpris per ddd\n  # ) |> \n  # ungroup() |> \n  filter(\n    !is.na(prpddd)\n  )\n\n# And translate the colnames to english for good measure\nhead(df_ddd_A10)\ncolnames(df_ddd_A10) <- c(\n  \"atc\",\n  \"compound\",\n  \"product\",\n  \"time\",\n  \"prpddd\" # Pharmacy Retail Price DDD\n)\nhead(df_ddd_A10)\n```\n\n### Prepping data for plotting\n\nThe resulting dataset is one with all registered Pharmacy Retail Price per Defined Daily Dose (PRP per DDD) of Drugs in the A10 ATC category, from between `{r} min(df_ddd_A10$time)` and `{r} max(df_ddd_A10$time)`. In other words: from the past `{r} as.numeric(difftime(max(df_ddd_A10$time), min(df_ddd_A10$time), units = \"days\")) / 365.25` years.\n\nThis is basically a measure of how much it costs to treat a person with the medication with a standard dose, each day, and can be used to compare how much each drug costs to use for treatment. This is used because it can be difficult to compare drugs based on redeemed prescriptions or prices, as some drugs are prescribed differently than others. Also, some drugs have absurdly high prices per pill, as some specialised drugs in oncology and opthalmology, compared to very cheap generic pain killers.\n\nThis is exemplified in the code below.\n\n```{r}\ndf_ddd_test <- df_ddd |> \n  filter(Indikator == \"AUP\") |> # AUP = Pharmacy Retail Price\n  pivot_longer(\n    cols = starts_with(\"20\"),\n    names_to = \"Tid\",\n    values_to = \"prp\"\n    ) |> \n    summarise(\n    highest_prp = max(prp, na.rm = TRUE),\n    lowest_prp = min(prp, na.rm = TRUE)\n  )\ndf_ddd_test\n```\n\nI want to present the numbers with inline code, and this can be done easily with the basic R function `format()` and `cat()` which can format the numeric value and concatenate the text.\n\n```{r}\n# Format the numbers in base R\nformatted_highest_prp <- format(df_ddd_test$highest_prp, big.mark = \",\", scientific = FALSE)\nformatted_lowest_prp <- format(df_ddd_test$lowest_prp, big.mark = \",\", scientific = FALSE)\n\n# Print the formatted numbers\ncat(\"Highest AUP:\", formatted_highest_prp, \"DKK\\n\")\ncat(\"Lowest AUP:\", formatted_lowest_prp, \"DKK\\n\")\n```\n\nBelow, the numbers are generated with inline code:\n\nThe highest Pharmacy Retail Price is `{r} cat(\"Highest AUP:\", formatted_highest_prp, \"DKK\\n\")`, and the lowest is `{r} cat(\"Lowest AUP:\", formatted_lowest_prp, \"DKK\\n\")`, which is QUITE a difference.\n\n### Making a plot\n\nNow, back to the retail price per DDD of diabetes drugs. Just as a visual aid, lets compare the most expensive to the cheapest, of the diabetes drugs.\n\nBut before that, a useful thing I picked up from [Meghan Hall's blog](https://meghan.rbind.io/), is putting a consistent theme on your plots. This can be done as below.\n\n```{r}\nlibrary(gghighlight)\nlibrary(scales)\nlibrary(ggtext)\nlibrary(ggrepel)\n\nhen_theme <- function () { \n  theme_linedraw(base_size=11) %+replace%  \n    theme(\n      panel.background  = element_blank(),\n      plot.background = element_rect(fill = \"white\", color = NA), \n      legend.background = element_rect(fill = \"white\", color = NA),\n      legend.key = element_rect(fill = \"white\", color = NA),\n      axis.ticks = element_blank(),\n      panel.grid.major = element_line(color = \"grey90\", size = 0.3), \n      panel.grid.minor = element_blank(),\n      plot.title.position = \"plot\",\n      plot.title = element_text(size = 16, hjust = 0, vjust = 0.5, \n                                margin = margin(b = 0.2, unit = \"cm\")),\n      plot.subtitle = element_text(size = 10, hjust = 0, vjust = 0.5, \n                                   margin = margin(b = 0.4, unit = \"cm\")),\n      plot.caption = element_text(size = 7, hjust = 1, face = \"italic\", \n                                  margin = margin(t = 0.1, unit = \"cm\")),\n      axis.text.x = element_text(size = 13),\n      axis.text.y = element_text(size = 13)\n    )\n}\n```\n\n<!-- fuld linje theme_linedraw(base_size=11, base_family=\"Calibri\") %+replace%. Gider ikke loade en masse fancy fonts. ikke så vigtigt. Det er besværligt men https://towardsdev.com/simple-guide-changing-fonts-in-ggplot2-with-extrafont-8f5100855f4 kan bruges. -->\n\nThe \"hen_theme\" is then added to future plots, at the end.\n\n```{r}\n# find most expensive \ndf_ddd_A10 |> \n  group_by(atc) |> \n  summarise(\n    highest_prpddd = max(prpddd, na.rm = TRUE),\n    lowest_prpddd = min(prpddd, na.rm = TRUE)\n  ) |>   \n  summarise(\n    most_expensive_atc = atc[which.max(highest_prpddd)],\n    most_expensive_value = max(highest_prpddd),\n    least_expensive_atc = atc[which.min(lowest_prpddd)],\n    least_expensive_value = min(lowest_prpddd)\n  )\n\n# plot\nhilo_ddd <- df_ddd_A10 |> \n  filter(atc == \"A10BX16\" | atc == \"A10BB12\") |> \n  select(compound,time,prpddd)\n  \nggplot(hilo_ddd, mapping = aes(x=time,y=prpddd, colour = compound)) +\n  geom_point() +\n  labs(\n    title = \"Cheapest and most expensive A10 drugs\",\n    subtitle = \"by Pharmacy Retail Price per DDD\",\n    y = \"Pharmacy Retail Price per DDD\",\n    x = \"\",\n  ) +\n  hen_theme() + \n  theme(\n    legend.title = element_blank(),\n    legend.position = c(0.8,0.9),\n    legend.background = element_rect(fill= \"white\")\n    )\n```\n\nThis plot tells us that the two drug compounds with the highest and lowest PRP per DDD are Glimepiride, of the [sulfonyurea](https://en.wikipedia.org/wiki/Sulfonylurea) class, and Tirzepatide, a [GIP](https://en.wikipedia.org/wiki/Gastric_inhibitory_polypeptide_receptor) and [GLP1](https://en.wikipedia.org/wiki/GLP-1_receptor_agonist) combination.\n\nNow, I wish to visualise how PRP per DDD changes over time. Below, I create the variables for the minimum and maximum values for each compound.\n\n```{r}\n# Make a new var thats floored to months and find the min for each month\ndf_ddd_A10_minmax <- df_ddd_A10 |> \n  mutate(month = floor_date(time,\"month\")) |> \n  group_by(month, atc, compound) |> \n  summarise(\n    a_min_prpddd = min(prpddd, na.rm = TRUE), # \"a_\" is to make it first in the facetwrap later \n    b_max_prpddd = max(prpddd, na.rm = TRUE)) |> \n  ungroup()\n\nhead(df_ddd_A10_minmax)\n```\n\nAnd now for the grand plot I have planned for this post, which will be an overview of the PRP per DDD for the main drug classes in diabetes type 2 treatment.\n\nFirst, I limit the dataset to only encompass the classes I want to look at.\n\n```{r}\ndfforplot <- df_ddd_A10_minmax |> \n  filter(\n    str_detect(atc,\"^A10BA\") |   # met\n      str_detect(atc,\"^A10BB\") | # sul\n      str_detect(atc,\"^A10BK\") | # sglt2\n      str_detect(atc,\"^A10BJ\") | # glp1\n      str_detect(atc,\"^A10BH\") | # dpp4\n      str_detect(atc,\"^A10BX16\") # tirzepatid, honoured guest\n    )  \n\n```\n\nThen, I try to make the plots which contain a surmountable amount of information.\n\n```{r}\n# Minimum values plot\nplotmin <- ggplot(dfforplot) +\n  geom_line(aes(x = month, y = a_min_prpddd, colour = compound), linewidth = 0.8) +\n  labs(title = \"Minimum PRP per DDD Over Time\",\n       x = \"\",\n       y = \"PRP per DDD\",\n       colour = \"Drug\") +\n  hen_theme()\n# Max\nplotmax <- ggplot(dfforplot) +\n  geom_line(aes(x = month, y = b_max_prpddd, colour = compound), linewidth = 0.8) +\n  labs(title = \"Maximum PRP per DDD Over Time\",\n       x = \"\",\n       y = \"PRP per DDD\",\n       colour = \"Drug\") +\n  hen_theme()\n\nplotmin\nplotmax\n```\n\nNow that is quite the jumble of lines.\n\nI want to do the following:\n\n-   Create a more meaningful colour representation\n-   Look at the outliers separately from the ones staying below 50 and 100, respectively.\n\nFirst, meaningful colour representation.\n\nThe exact amount of different compounds within each class can be found via the code below.\n\n```{r}\ndfforplot |> group_by(atc) |> distinct(compound)\n```\n\nNow we can setup a vector with colour mapping using the output from above. Copy and paste it into a text editor to convert it to something useful. There are probably smarter ways to use that output.\n\n```{r}\n# prep colour scheme for drugs\n\ncolour_mapping <- c(\n  # Unique drug\n  \"Metformin\"       = \"#000000\",  # Deep Blue (for uniqueness)\n\n  # Sulfonylureas (reddish colors)\n  \"Glibenclamid\"    = \"#d62728\",  # Red\n  \"Glipizid\"        = \"#e37777\",  # Light Red\n  \"Gliclazid\"       = \"#c13515\",  # Darker Red\n  \"Glimepirid\"      = \"#ff6347\",  # Tomato Red\n\n  # DPP-4 inhibitors (greenish colors)\n  \"Sitagliptin\"     = \"#2ca02c\",  # Green\n  \"Vildagliptin\"    = \"#98df8a\",  # Light Green\n  \"Saxagliptin\"     = \"#34a56f\",  # Teal Green\n  \"Alogliptin\"      = \"#57a774\",  # Medium Green\n  \"Linagliptin\"     = \"#1e7f5f\",  # Dark Green\n\n  # GLP-1 receptor agonists (bluish colors)\n  \"Exenatid\"        = \"#1f77b4\",  # Deep Blue\n  \"Liraglutid\"      = \"#5b9bd5\",  # Light Blue\n  \"Lixisenatid\"     = \"#6495ed\",  # Cornflower Blue\n  \"Dulaglutid\"      = \"#4682b4\",  # Steel Blue\n  \"Semaglutid\"      = \"#4169e1\",  # Royal Blue\n\n  # SGLT2 inhibitors (yellowish and brownish colors)\n  \"Dapagliflozin\"   = \"#ffd700\",  # Gold\n  \"Canagliflozin\"   = \"#e5b33f\",  # Dark Yellow\n  \"Empagliflozin\"   = \"#d9a120\",  # Mustard\n  \"Ertugliflozin\"   = \"#b8860b\",  # Dark Goldenrod\n\n  # Tirzepatide (distinct color)\n  \"Tirzepatid\"      = \"#8b008b\"   # Dark Magenta\n)\n\n```\n\n```{=html}\n<!-- \nMaybe change line shapes, see ggplot index - \naes_linetype_size_shape {ggplot2} ..\n\nThen i make geom-lines for each atc group ? -->\n```\n\nNow to look at the ones who are not outliers separately to see if the graph is visually meaningful.\n\n```{r}\ntestplot1 <- ggplot(dfforplot |> filter(a_min_prpddd<100), aes(x = month, y = a_min_prpddd, colour = compound)) +\n  geom_line() +\n  scale_colour_manual(values = colour_mapping) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(title = \"Minimum Pharmacy Retail Price per DDD, in DKK\",\n       x = \"\",\n       y = \"\",\n       colour = \"Drug\") +\n  hen_theme() \n\ntestplot1\n```\n\nFirst of all, this is a mess. In addition to looking at the outliers separately, I want to do the following:\n\n1.  Sort the legend according to drug class (atc codes)\n2.  Reduce the amount of compounds included\n\nFor (1), y'all need to hold on for dear life because this stuff is an amalgamation of what I have done in my PhD combined with some new things. I will have to explain each part of the code in great detail to even remember how this works.\n\n*The explanations are maybe mostly for me*.\n\nTo achieve that, I will firstly make a variable with a label for each drug class. Then, I will order the compound variable by the class variable. Then I apply cus tom colours to the compound variable.\n\nThe first part is relatively simply done using `case_when()` and knowledge of what classes the ATC codes represent.\n\n```{r}\ndfforplot <- dfforplot |> \n  mutate(class = case_when(\n    substr(atc, 1, 5) == \"A10BA\" ~ \"Metformin\",\n    substr(atc, 1, 5) == \"A10BB\" ~ \"Sulfonylureas\",\n    substr(atc, 1, 5) == \"A10BH\" ~ \"DPP4\",\n    substr(atc, 1, 5) == \"A10BJ\" ~ \"GLP1\",\n    substr(atc, 1, 5) == \"A10BK\" ~ \"SGLT2\",\n    substr(atc, 1, 5) == \"A10BX\" ~ \"Tirzepatide\",\n    TRUE ~ \"Other\"  # For any other unclassified codes\n  ))\n```\n\nFor the second part, I set the order I want, turn the `class` variable into a factor, and then `arrange()` the compounds within each class according to this order. Finally, I turn the compound variable into a factor that is ordered by its unique levels, which correspond to the classes, and check that `compound` has the correct order.\n\n```{r}\nclass_order <- c(\"Metformin\", \"Sulfonylureas\", \"DPP4\", \"GLP1\", \"SGLT2\", \"Tirzepatide\")\ndfforplot <- dfforplot |>\n  mutate(class = factor(class, levels = class_order))  |>\n  arrange(class, compound) |>\n  mutate(compound = factor(compound, levels = unique(compound)))\nprint(levels(dfforplot$compound))\n```\n\nThe third part is simply remembering the order of classes, and how many compounds are within each class, and then creating a selection of colours via the `colorRampPallette()` function, and then store that in the object `colours_compunds`, to use in the plot.\n\n```{r}\nmet_colours  <- colorRampPalette(c(\"black\"))(1)\nsu_colours  <- colorRampPalette(c(\"pink\",\"darkred\"))(4)\ndpp4_colours   <- colorRampPalette(c(\"green\",\"darkgreen\"))(5) # NB THIS WORKS BECAUSE THE FIRST 5 ARE DPP4, 6 are GLP1, etc etc.\nglp1_colours   <- colorRampPalette(c(\"lightblue\",\"darkblue\"))(5)\nsglt2_colours  <- colorRampPalette(c(\"yellow\",\"#b8860b\"))(4)\ntir_colours  <- colorRampPalette(c(\"#8b008b\"))(1)\ncolours_compounds <- c(met_colours,\n                su_colours,\n                dpp4_colours,  \n                glp1_colours,\n                sglt2_colours,\n                tir_colours) # combine\nbarplot(rep(1,20), col=colours_compounds, border = \"white\", axes = FALSE)\n```\n\nFor (2), I will focus on the three most sold compounds in the latest year and remove the rest to avoid cluttering the plot with information. \n\nI use [Medstat](https://medstat.dk/) as a source, and what I look for is DDD sold in total across the entire healthcare sector, which is incredible easy to extract from the site. The amounts are from when I viewed the site in October 2024. Below, I store a vector of the most three most used compounds (less if class has less compounds).\n\n```{r}\nkept_compounds <- c(\n  \"Metformin\", \n  \"Glipizid\",\n  \"Gliclazid\",\n  \"Glimepirid\",\n  \"Sitagliptin\",\n  \"Vildagliptin\",\n  \"Linagliptin\",\n  \"Liraglutid\",\n  \"Dulaglutid\",\n  \"Semaglutid\",\n  \"Dapagliflozin\",\n  \"Canagliflozin\",\n  \"Empagliflozin\",\n  \"Tirzepatid\"  \n)\n```\n\nNow, lets make plots for the ones that are not outliers. In practice I will do that by just limiting the y axis.\n\n```{r}\ndfforplot |> \n  filter(a_min_prpddd<100\n         & compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = a_min_prpddd, colour = compound)) +\n  geom_line() +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(title = \"Minimum Pharmacy Retail Price per DDD, in DKK\",\n       x = \"\",\n       y = \"\",\n       colour = \"Drug\") +\n  hen_theme() \n```\n\n**Oops**, I messed up. The colours do not fit anymore. Will fit the colours to the new more limited amount of compounds.\n\n```{r}\nmet_colours  <- colorRampPalette(c(\"black\"))(1)\nsu_colours  <- colorRampPalette(c(\"pink\",\"darkred\"))(3)\ndpp4_colours   <- colorRampPalette(c(\"green\",\"darkgreen\"))(3) # NB THIS WORKS BECAUSE THE FIRST 5 ARE DPP4, 6 are GLP1, etc etc.\nglp1_colours   <- colorRampPalette(c(\"lightblue\",\"darkblue\"))(3)\nsglt2_colours  <- colorRampPalette(c(\"yellow\",\"#b8860b\"))(3)\ntir_colours  <- colorRampPalette(c(\"#8b008b\"))(1)\ncolours_compounds <- c(met_colours,\n                su_colours,\n                dpp4_colours,  \n                glp1_colours,\n                sglt2_colours,\n                tir_colours) # combine\nbarplot(rep(1,15), col=colours_compounds, border = \"white\", axes = FALSE)\n```\nNow try again.\n\n```{r}\ndfforplot |> \n  filter(a_min_prpddd<100\n         & compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = a_min_prpddd, colour = compound)) +\n  geom_line() +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(title = \"Minimum Pharmacy Retail Price per DDD, in DKK\",\n       x = \"\",\n       y = \"\",\n       colour = \"Drug\") +\n  hen_theme() \n```\n\nNow that looks much better. Now let's make the final graph, using `facet_wrap()` to distinguish between the minimum and maximum PRP per DDD.\n\nTo use `facet_wrap()`, we pivot the dataset before plotting.\n\n```{r}\ndfforplot_pivot <- dfforplot |> \n  pivot_longer(\n    cols = ends_with(\"prpddd\"),\n    names_to = \"ddd\",\n    values_to = \"minmax\"\n  ) |> arrange(minmax)\n\nhead(dfforplot_pivot)\n```\n\nAnd then make the plot.\n\n```{r}\ndfforplot_pivot |> \n  filter(compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = minmax, colour = compound)) +\n  geom_line() +\n  facet_wrap(\n    ~ddd, \n    scales = \"free\",\n    labeller = labeller(ddd =\n                          c(\"a_min_prpddd\" = \"Minimum\",\n                            \"b_max_prpddd\" = \"Maximum\")\n                        )) +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(title = \"Minimum Pharmacy Retail Price per DDD, in DKK\",\n       x = \"\",\n       y = \"\",\n       colour = \"Drug\") +\n  hen_theme() \n```\n\nAnd the final, more presentable plot.\n\n```{r}\ndfforplot_pivot |> \n  filter(minmax<100\n         & compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = minmax, colour = compound)) +\n  geom_line() +\n  facet_wrap(\n    ~ddd, \n    scales = \"free\",\n    labeller = labeller(ddd =\n                          c(\"a_min_prpddd\" = \"Minimum\",\n                            \"b_max_prpddd\" = \"Maximum\")\n                        )) +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(\n    title = \"Pharmacy Retail Price per DDD, in DKK\",\n    caption = \"Outliers: Minimum Tirzepatide prices go from\",\n    x = \"\",\n    y = \"\",\n    colour = \"Drug\") +\n  hen_theme() \n```\n\nI also want to add information about the outliers on the plot.\n\n**JEG HAR GJORT DET MESTE FÆRDIGT OG VIL BARE GERNE SKRIVE DET RENT SENERE**\n\n```{r}\n# Filter the dataset for Semaglutide and Tirzepatide\nsubset_df <- dfforplot_pivot %>%\n  filter(compound %in% c(\"Semaglutid\", \"Tirzepatid\"))\n\n# Summarise the earliest, latest, highest, and lowest values for each compound\nsummary_df <- subset_df %>%\n  group_by(compound) %>%\n  summarise(\n    earliest_date = min(month),\n    latest_date = max(month),\n    highest_ddd = max(minmax),\n    lowest_ddd = min(minmax),\n    .groups = 'drop'  # Ungroup after summarising\n  )\n\n# View the resulting dataset\nprint(summary_df)\n\n# Create a caption string\ncaption_text <- paste(\n  \"Outliers were Semaglutide and Tirzepatide. Lowest PRP per DDD for Semaglutide was\",\n  \"22.6, which increased to 308 in 2024.\",\n  \"For Tirzepatide, the lowest value was 103, and increased to 522 in September of 2024.\"\n  )\n\n# Print caption for verification\nprint(caption_text)\n```\n\nDoublechecking with my older data.\n\n```{r}\ndf_ddd_A10 |> filter(str_detect(compound, \"Tirzepatid\")) |> summarise(haps = min(prpddd))\ndf_ddd_A10 |> filter(str_detect(compound, \"Tirzepatid\")) |> summarise(haps = max(prpddd))\ndf_ddd_A10 |> filter(str_detect(compound, \"Semaglutid\")) |> summarise(haps = min(prpddd))\ndf_ddd_A10 |> filter(str_detect(compound, \"Semaglutid\")) |> summarise(haps = max(prpddd))\n```\n\nSo that makes the final final plot:\n\n```{r}\ndfforplot_pivot |> \n  filter(minmax<100\n         & compound %in% kept_compounds) |> \n  ggplot(aes(x = month, y = minmax, colour = compound)) +\n  geom_line() +\n  facet_wrap(\n    ~ddd, \n    scales = \"free\",\n    labeller = labeller(ddd =\n                          c(\"a_min_prpddd\" = \"Minimum\",\n                            \"b_max_prpddd\" = \"Maximum\")\n                        )) +\n  scale_colour_manual(values = colours_compounds) +\n  scale_x_continuous(breaks = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"),\n                     labels = format(seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2025-12-01\"), by = \"year\"), \"%Y\")) +\n  labs(\n    title = \"Pharmacy Retail Price per DDD, in DKK\",\n    caption = caption_text,\n    x = \"\",\n    y = \"\",\n    colour = \"Drug\") +\n  hen_theme() \n\nggsave(\"thumbnail.png\", plot = last_plot(), width = 6, height = 4) # saved as thumbnail\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":4,"self-contained":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","editor":"source","theme":"darkly","fontsize":"0.9em","title-block-banner":true,"toc-location":"right","toc-title":"On this page","title":"Evolution in DDD use of Diabetes Drugs over time","author":"Henrik Vitus Bering Laursen","date":"2024-09-30","categories":["code","analysis","exploration","cost","drugs"],"image":"thumbnail.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}