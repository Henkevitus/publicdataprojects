{
  "hash": "75b999fd81df63367b18d1fe782d8b21",
  "result": {
    "markdown": "---\ntitle: \"Making sense of Medstat.dk data\"\nauthor: \"Henrik Vitus Bering Laursen\"\ndate: \"2024-09-19\"\ncategories: \n  - code\n  - analysis\n  - exploration\n  - cost\n  - drugs\nimage: thumbnail.png\nfreeze: true\n---\n\n\n## Exploring Medstat data: Drug prescriptions in Denmark\n\nIn this post, I'll showcase how to work with publicly available drug prescription data from [medstat.dk](medstat.dk \"medstat.dk\"). This is a great way to practice data manipulation and analysis, using real-world data.\n\n### Downloading the data\n\nYou can download all the datasets from [medstat.dk's download section](https://medstat.dk/da/download). If you want to download multiple files and not have to work with the URLs, I recommend using the [downloadthemall](https://www.downthemall.net/) extension to batch download the data for easier local manipulation. \n\nSince I’m using GitHub to store my work, I’ll download the data directly from Medstat. GitHub has a 2GB storage limit per repository, which means large public datasets can quickly exceed this. Therefore, it’s important to manage the size of the files efficiently.\n\n### Loading and processing the data\n\nGood old trusty `tidyverse` has a lot of what I need, specifically the `readr` package, \"secretly\" loaded the library in an invisible chunk below, with `#| include: FALSE`, but also `#| warning: FALSE` because it wants to warn me about conflicts with the `tidyverse` package.\n    \n    #| include: FALSE\n    #| warning: FALSE\n    library(tidyverse)\n\n\n\n\n\n### Fetching the data from medstat\n\nYou can use tools like the [MarkDownload](https://github.com/deathau/markdownload) extension to find the download links from the resulting markdown file it hands you. \n\nNow lets load an example dataset. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the URL for the dataset ()\nurl_atc_2023 <- \"https://medstat.dk/da/download/file/MjAyM19hdGNfY29kZV9kYXRhLnR4dA==\"\n\n# Read the dataset directly from the URL\ndf_atc_2023 <- read_delim(url_atc_2023, delim = \";\", show_col_types = FALSE)  # Assuming the file is tab-delimited\n\n# Print the first few rows of the dataset\nhead(df_atc_2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  A...1 `2023` `0...3` `0...4` A...5 A...6  ...7  ...8 `5009988` `2661589` ...11\n  <chr>  <dbl>   <dbl>   <dbl> <chr> <chr> <dbl> <dbl>     <dbl>     <dbl> <dbl>\n1 A       2023       0       0 2     00-17 25116  44.6     32451     21308    NA\n2 A       2023       0       0 1     00-17 21962  37.0     40295     29871    NA\n3 A       2023       0       0 0     00-17 47080  40.7     72746     51179    NA\n4 A       2023       0       0 2     18-24 23313  92.3     51797     21707    NA\n5 A       2023       0       0 1     18-24 13137  50.1     29808     15882    NA\n6 A       2023       0       0 0     18-24 36450  70.8     81606     37590    NA\n# ℹ 3 more variables: ...12 <dbl>, `94` <chr>, ...14 <lgl>\n```\n:::\n:::\n\n\nOk, this data is without headers. A way to save space probably. \n\n### Understanding the data structure\n\n**Thankfully** there is a documentation file the website: [Downloadbeskrivelse medstat](https://medstat.dk/apps/lms/public/dokumentation/Downloadbeskrivelse.pdf). This file explains the strucutre of the datasets and for the data that we look at, `YYYY_atc_code_data.txt`, the following variables apply (translated to English from the original Danish):\n\n- `atc`: Anatomical Therapeutic Chemical code\n- `year`: Year of data\n- `sector`: Healthcare sector\n- `region`: Geographic region\n- `sex`: Gender\n- `agegroup`: Age category\n- `count_persons`: Number of individuals\n- `count_persons_per1kpop`: Number of individuals per 1,000 population\n- `turnover`: Sales turnover\n- `reimbursement`: Reimbursements provided\n- `sold_amount`: Amount of drugs sold\n- `sold_amount_1kpop_day`: Amount sold per 1,000 population per day\n- `personreferabledata_perc`: Percentage of data referable to individuals\n\nSo we can use `colnames()` to transfer these column names to our dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# attach colnames\ncolnames(df_atc_2023) <- c(\"atc\",\"year\",\"sector\",\"region\",\"sex\",\"agegroup\",\"count_persons\",\"count_persons_per1kpop\",\"turnover\",\"reimbursement\", \"sold_amount\", \"sold_amount_1kpop_day\", \"personreferabledata_perc\")\n\n# View data\nhead(df_atc_2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  atc    year sector region sex   agegroup count_persons count_persons_per1kpop\n  <chr> <dbl>  <dbl>  <dbl> <chr> <chr>            <dbl>                  <dbl>\n1 A      2023      0      0 2     00-17            25116                   44.6\n2 A      2023      0      0 1     00-17            21962                   37.0\n3 A      2023      0      0 0     00-17            47080                   40.7\n4 A      2023      0      0 2     18-24            23313                   92.3\n5 A      2023      0      0 1     18-24            13137                   50.1\n6 A      2023      0      0 0     18-24            36450                   70.8\n# ℹ 6 more variables: turnover <dbl>, reimbursement <dbl>, sold_amount <dbl>,\n#   sold_amount_1kpop_day <dbl>, personreferabledata_perc <chr>, `` <lgl>\n```\n:::\n\n```{.r .cell-code}\nglimpse(df_atc_2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,806,544\nColumns: 14\n$ atc                      <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", …\n$ year                     <dbl> 2023, 2023, 2023, 2023, 2023, 2023, 2023, 202…\n$ sector                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ region                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ sex                      <chr> \"2\", \"1\", \"0\", \"2\", \"1\", \"0\", \"2\", \"1\", \"0\", …\n$ agegroup                 <chr> \"00-17\", \"00-17\", \"00-17\", \"18-24\", \"18-24\", …\n$ count_persons            <dbl> 25116, 21962, 47080, 23313, 13137, 36450, 124…\n$ count_persons_per1kpop   <dbl> 44.61, 37.04, 40.73, 92.26, 50.10, 70.79, 169…\n$ turnover                 <dbl> 32451, 40295, 72746, 51797, 29808, 81606, 419…\n$ reimbursement            <dbl> 21308, 29871, 51179, 21707, 15882, 37590, 104…\n$ sold_amount              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ sold_amount_1kpop_day    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ personreferabledata_perc <chr> \"94\", \"94\", \"94\", \"94\", \"94\", \"94\", \"94\", \"94…\n$ NA                       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n:::\n:::\n\n\nMissing name for one column that doesnt fit with the \"Downloadbeskrivelse medstat\". What is it?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# call it something\ncolnames(df_atc_2023)[is.na(colnames(df_atc_2023))] <- \"missing_name\"\n\n# table of content\ntable(df_atc_2023$missing_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n< table of extent 0 >\n```\n:::\n:::\n\n\nThis column is empty. Maybe just an artifact from the delim file. Lets assume we can safely remove it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_atc_2023 <- df_atc_2023 |>  select(-missing_name)\n```\n:::\n\n\n### Organising the data\n\nTime to figure out how this data is structured, and organise the character variables into factors. Factors, as you may know, are a data structure in R, which is akin to a categorisation, ordered or unordered. Since we have age, we probably have at least some age categories that are ordered in intervals. Lets find out what the different variables likely to be factors are.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Finding all unique values even though i could just consult \"Downloadbeskrivelse medstat\"\nunique_values_all_columns <- unique(unlist(sapply(df_atc_2023, function(x) if(is.character(x)) unique(x))))\nprint(unique_values_all_columns)\n```\n:::\n\n\nWoops. I have hidden the massive output of this via `#| results: 'hide'`. I forgot that ATC has QUITE a lot of unique values. Lets make a data frame without the atc value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove atc\ndf_atc_2023_mini <- df_atc_2023 |>  select(-atc)\n\n# Go through all variables that could be categories (often stored as characters by default) and display unique values\nunique(unlist(sapply(df_atc_2023_mini, function(x) if(is.character(x)) unique(x))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"2\"     \"1\"     \"0\"     \"A\"     \"00-17\" \"18-24\" \"25-44\" \"45-64\" \"65-79\"\n [10] \"80+\"   \"000\"   \"001\"   \"002\"   \"003\"   \"004\"   \"005\"   \"006\"   \"007\"  \n [19] \"008\"   \"009\"   \"010\"   \"011\"   \"012\"   \"013\"   \"014\"   \"015\"   \"016\"  \n [28] \"017\"   \"018\"   \"019\"   \"020\"   \"021\"   \"022\"   \"023\"   \"024\"   \"025\"  \n [37] \"026\"   \"027\"   \"028\"   \"029\"   \"030\"   \"031\"   \"032\"   \"033\"   \"034\"  \n [46] \"035\"   \"036\"   \"037\"   \"038\"   \"039\"   \"040\"   \"041\"   \"042\"   \"043\"  \n [55] \"044\"   \"045\"   \"046\"   \"047\"   \"048\"   \"049\"   \"050\"   \"051\"   \"052\"  \n [64] \"053\"   \"054\"   \"055\"   \"056\"   \"057\"   \"058\"   \"059\"   \"060\"   \"061\"  \n [73] \"062\"   \"063\"   \"064\"   \"065\"   \"066\"   \"067\"   \"068\"   \"069\"   \"070\"  \n [82] \"071\"   \"072\"   \"073\"   \"074\"   \"075\"   \"076\"   \"077\"   \"078\"   \"079\"  \n [91] \"080\"   \"081\"   \"082\"   \"083\"   \"084\"   \"085\"   \"086\"   \"087\"   \"088\"  \n[100] \"089\"   \"090\"   \"091\"   \"092\"   \"093\"   \"094\"   \"95+\"   \"T\"     \"94\"   \n[109] NA      \"92\"    \"95\"    \">99\"   \"86\"    \"15\"    \"18\"    \"60\"    \"96\"   \n[118] \"19\"    \"98\"    \"97\"    \"91\"    \"11\"    \"20\"    \"10\"    \"83\"    \"65\"   \n[127] \"99\"    \"8\"     \"55\"    \"46\"    \"40\"    \"36\"    \"44\"    \"51\"    \"45\"   \n[136] \"54\"    \"50\"    \"48\"    \"89\"    \"81\"    \"34\"    \"57\"    \"53\"    \"87\"   \n[145] \"39\"    \"41\"    \"9\"     \"64\"    \"56\"    \"93\"    \"42\"    \"70\"    \"75\"   \n[154] \"61\"    \"84\"    \"26\"    \"43\"    \"59\"    \"90\"    \"14\"    \"28\"    \"30\"   \n[163] \"52\"    \"32\"    \"3\"     \"27\"    \"69\"    \"16\"    \"71\"    \"6\"     \"25\"   \n[172] \"67\"    \"78\"    \"77\"    \"23\"    \"5\"     \"22\"    \"13\"    \"72\"    \"17\"   \n[181] \"21\"    \"<1\"    \"66\"    \"38\"    \"62\"    \"73\"    \"88\"    \"76\"    \"12\"   \n[190] \"4\"     \"58\"    \"33\"    \"82\"    \"29\"    \"63\"    \"31\"    \"80\"    \"79\"   \n[199] \"74\"    \"85\"    \"49\"    \"68\"    \"35\"   \n```\n:::\n:::\n\n\nOr, in a little more legible fashion, use some apply functions to first find the ones that are characters with `sapply()`, and then `lapply()` to create a list of all unique values of the character vars.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find character variables\nchar_columns <- df_atc_2023_mini[sapply(df_atc_2023_mini, is.character)]\n\n# apply the unique() function to each character variable\nunique_char_values <- lapply(char_columns, unique)\nunique_char_values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$sex\n[1] \"2\" \"1\" \"0\" \"A\"\n\n$agegroup\n  [1] \"00-17\" \"18-24\" \"25-44\" \"45-64\" \"65-79\" \"80+\"   \"000\"   \"001\"   \"002\"  \n [10] \"003\"   \"004\"   \"005\"   \"006\"   \"007\"   \"008\"   \"009\"   \"010\"   \"011\"  \n [19] \"012\"   \"013\"   \"014\"   \"015\"   \"016\"   \"017\"   \"018\"   \"019\"   \"020\"  \n [28] \"021\"   \"022\"   \"023\"   \"024\"   \"025\"   \"026\"   \"027\"   \"028\"   \"029\"  \n [37] \"030\"   \"031\"   \"032\"   \"033\"   \"034\"   \"035\"   \"036\"   \"037\"   \"038\"  \n [46] \"039\"   \"040\"   \"041\"   \"042\"   \"043\"   \"044\"   \"045\"   \"046\"   \"047\"  \n [55] \"048\"   \"049\"   \"050\"   \"051\"   \"052\"   \"053\"   \"054\"   \"055\"   \"056\"  \n [64] \"057\"   \"058\"   \"059\"   \"060\"   \"061\"   \"062\"   \"063\"   \"064\"   \"065\"  \n [73] \"066\"   \"067\"   \"068\"   \"069\"   \"070\"   \"071\"   \"072\"   \"073\"   \"074\"  \n [82] \"075\"   \"076\"   \"077\"   \"078\"   \"079\"   \"080\"   \"081\"   \"082\"   \"083\"  \n [91] \"084\"   \"085\"   \"086\"   \"087\"   \"088\"   \"089\"   \"090\"   \"091\"   \"092\"  \n[100] \"093\"   \"094\"   \"95+\"   \"T\"     \"A\"    \n\n$personreferabledata_perc\n [1] \"94\"  NA    \"92\"  \"95\"  \">99\" \"86\"  \"15\"  \"18\"  \"2\"   \"60\"  \"96\"  \"19\" \n[13] \"98\"  \"97\"  \"91\"  \"11\"  \"20\"  \"10\"  \"83\"  \"65\"  \"99\"  \"8\"   \"55\"  \"46\" \n[25] \"40\"  \"36\"  \"44\"  \"51\"  \"45\"  \"54\"  \"50\"  \"48\"  \"89\"  \"81\"  \"34\"  \"57\" \n[37] \"53\"  \"87\"  \"39\"  \"41\"  \"9\"   \"64\"  \"56\"  \"93\"  \"42\"  \"70\"  \"75\"  \"61\" \n[49] \"84\"  \"26\"  \"43\"  \"59\"  \"90\"  \"14\"  \"1\"   \"28\"  \"30\"  \"52\"  \"32\"  \"3\"  \n[61] \"27\"  \"69\"  \"16\"  \"71\"  \"6\"   \"25\"  \"67\"  \"78\"  \"77\"  \"23\"  \"5\"   \"22\" \n[73] \"13\"  \"72\"  \"17\"  \"21\"  \"<1\"  \"66\"  \"38\"  \"62\"  \"73\"  \"88\"  \"76\"  \"12\" \n[85] \"4\"   \"58\"  \"33\"  \"82\"  \"29\"  \"63\"  \"31\"  \"80\"  \"79\"  \"74\"  \"85\"  \"49\" \n[97] \"68\"  \"35\" \n```\n:::\n:::\n\n\n\nMore manageable amount of unique values. Although it seems there are multiple age categories within the `agegroup` variable. I will remove `df_atc_2023_mini` and `unique_char_values` as they were created for the purpose of creating an overview of the unique values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(df_atc_2023_mini, unique_char_values)\n```\n:::\n\n\nLets focus on the unique age groups. The data for age groups must be duplicated for the ranges 000 to 017, and the age category \"00-17\". This would not be included if the goal was to save space, as a single variable containing the age from 000 to 95+ could be grouped into intervals with a `mutate()` or `cut()` function.\n\nFrom here, I will use `dplyr`, as it is easier to read the operations performed on the data.\n\nI will explore the following questions:\n\n1. Are the age range equal to the age intervals? \n2. What do the sex categories represent?\n3. Exactly to what degree is the dataset full of duplicated data?\n\n#### Age range versus intervals\n\nTo figure out whether the age range versus the prespecified intervals have the same data, we can summarise a variable, here `turnover`, for the two groups, and see if they are the same.\n\nFirst, lets summarize `turnover` for the age interval \"00-17\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a datset by filtering on 00-17\ndf_atc_2023_interval <- df_atc_2023 |> \n  filter(agegroup == \"00-17\")\n\n# Summarise it\nturnover_sum_interval <- df_atc_2023_interval |> \n  summarize(turnover = sum(turnover, na.rm = TRUE))\n```\n:::\n\n\n15.373.244 in 1000 DKK, so 15.373.244.000, or more than 15 billion DKK in 2023. For one age interval. Woav.\n\nNow, lets try to do it for the age range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make vector to include in the filter\nnumbers <- sprintf(\"%03d\", 0:17)\n\n# Now filter in the same way as above, but for 000 to 017\ndf_atc_2023_range <- df_atc_2023 |> \n  filter(agegroup %in% numbers) \n  \n# Summarise\nturnover_sum_range  <- df_atc_2023_range |> mutate(\n    agegroup_combined = \n      ifelse(\n        agegroup %in% numbers, \n        \"000-017\", \n        agegroup)) |> \n  ungroup() |> \n  summarize(turnover = sum(turnover, na.rm = TRUE)) #, .groups = \"drop\")\nturnover_sum_range\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  turnover\n     <dbl>\n1 14857936\n```\n:::\n:::\n\n\nNow lets compare.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summary\nprint(turnover_sum_interval)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  turnover\n     <dbl>\n1 15373247\n```\n:::\n\n```{.r .cell-code}\nprint(turnover_sum_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  turnover\n     <dbl>\n1 14857936\n```\n:::\n\n```{.r .cell-code}\n# There is a difference.. How much? \n(print(turnover_sum_interval)-print(turnover_sum_range))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  turnover\n     <dbl>\n1 15373247\n# A tibble: 1 × 1\n  turnover\n     <dbl>\n1 14857936\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  turnover\n1   515311\n```\n:::\n:::\n\n\nOkay, these two should be equal. Where did those 515.309.000 go? Thats a difference of `{r} round(((turnover_sum_interval-turnover_sum_range)/turnover_sum_range)*100,2)`%. The number calculated with inline R code - with \"{r} round(((turnover_sum_interval-turnover_sum_range)/turnover_sum_range)*100,2)\" surrounded by backticks - because that is nice to have in case you want to have your numbers in the text change accordingly with any change in the data you have done. Anyway.. what went wrong?\n\nHow very strange. How do I figure out why there is a difference?\n\nAre there the same amount of people in each category?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count amount of people in each category\ncount_persons_range <- df_atc_2023 |> \n  filter(agegroup %in% numbers) |> \n  summarise(total = sum(count_persons))\ncount_persons_int <- df_atc_2023 |> \n  filter(agegroup == \"00-17\") |> \n  summarise(total = sum(count_persons))\n\n# Difference\ncount_persons_int-count_persons_range\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   total\n1 131104\n```\n:::\n:::\n\n\nOk. 131.087 people are missing from the \"range\" dataset. Thats a difference of `{r} round(((count_persons_int-count_persons_range)/count_persons_range)*100,2)`% I might have done something wrong. Or there is a mistake in the data.\n\n### Moving on\n\nLet's drop the other questions I wanted to ask above, atleast for now. A patient Data Scientist with a lot of time on their hands should probably find the cause of the error by doing some of the following:\n\n- Check the discrepancies across multiple variables\n- Recheck the \"Downloadbeskrivelse\" to see if the metadata for the data has a description of why there would be a descrepancy\n\nBecause if it was an error, this `{r} round(((turnover_sum_interval-turnover_sum_range)/turnover_sum_range)*100,2)`% difference in Turnover and `{r} round(((count_persons_int-count_persons_range)/count_persons_range)*100,2)`% difference in amount of people in the category is something I will let sit.\n\n**My main hypothesis** which just popped into my head just now is that since the data is missing from the `count_persons_range` dataset, it has something to do with removing observations from the original dataset that contains too much person-referable [personhenførbart] data.\n\n**Now**, with that in mind, I, an aspiring Data Scientist with a goal of making a blog post and not taking forever, will just use the data with age intervals, as according to my hypothesis, that is the most \"complete\" data.\n\n**With that dataset**, I will provide a brief overview of the drug classes with the highest turnover, by age group.\n\n#### Turnover by popular drug classes\n\nLet's start with the `df_atc_2023` dataset and:\n\n- Filter just the age-interval group, starting with \"00-17\"\n- Filter it down to just the following drug classes: GLP1, SGLT2, DPP4, BIGUANIDES (Metformin in this case), and INSULIN. ATC's are A10BJ, A10BK, A10BH, A10BA, and A10A.X, respectively \n- Summarize the drug classes over the age intervals, with a nice plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter\ndf_atc_2023_filtered <- df_atc_2023 |> \n  filter(\n    str_detect(agegroup, \"-\") & \n    str_starts(atc, \"A10\")\n    )\nhead(df_atc_2023_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 13\n  atc    year sector region sex   agegroup count_persons count_persons_per1kpop\n  <chr> <dbl>  <dbl>  <dbl> <chr> <chr>            <dbl>                  <dbl>\n1 A10    2023      0      0 2     00-17             1780                   3.16\n2 A10    2023      0      0 1     00-17             1832                   3.09\n3 A10    2023      0      0 0     00-17             3610                   3.13\n4 A10    2023      0      0 2     18-24             4716                  18.7 \n5 A10    2023      0      0 1     18-24             2777                  10.6 \n6 A10    2023      0      0 0     18-24             7495                  14.6 \n# ℹ 5 more variables: turnover <dbl>, reimbursement <dbl>, sold_amount <dbl>,\n#   sold_amount_1kpop_day <dbl>, personreferabledata_perc <chr>\n```\n:::\n:::\n\n\n**Ok - another observation that popped up**: here I find evidence to support my hypothesis of data being deleted when it is too person-referable. Looking at the lowest ATC level (e.g. A10BJK01), there is \"0\" in `count_persons`, for at lot of the input. And the lowest number is \"5\". \n\nThis replacement of too low values with \"missing\" or \"0\" is frequently done to mask the fact that perhaps there were just 2 people receiving that drug in this year, which makes the probability that someone can identify who it is that much higher. So it is masking the data to protect the individuals who provided the data.\n\nMoving on, and taking that into account, I choose to filter on the drug class level, as it repeats anyway. E.g. for observations with `atc` = A10BJ, the data is summarised over the age groups, and within each A10BJ01..02..0n, I will find all that is contained in A10BJ. \n\n### Making a plot of the turnover by drug class\n\nNow, I have what I need to create the plots of turnover. I choose to make stacked bar charts, because I am used to making them, but there are probably better ways of representing the data. \n\nFirst, I prepare the data, by filtering out all the drug classes I do not wish to focus on, and making the y-axis more readable by dividing it with 1000, thus making it turnover in 1.000.000 of DKK\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create vector of drug classes \nDCs <- c(\"A10BJ\", \"A10BK\", \"A10BH\", \"A10BA\", \"A10BB\", \"A10BG\", \"A10BX\", \"A10A\") \n\n# Filter\ndf_atc_2023_filtered <- df_atc_2023_filtered |> \n  filter(atc %in% DCs) |> \n  mutate(\n    DC = case_when( # New drug class variable\n      atc == \"A10BJ\" ~ \"GLP1\", # GLP1\n      atc == \"A10BK\" ~ \"SGLT2\", # SGLT2\n      atc == \"A10BH\" ~ \"DPP4\", # DPP4\n      atc == \"A10BA\" ~ \"Metformin\", # MET\n      atc == \"A10BB\" ~ \"SU\", # SU\n      atc == \"A10BG\" ~ \"TZD\", # Thiazolidinediones\n      atc == \"A10BX\" ~ \"Others\", # Others\n      atc == \"A10A\"  ~ \"INSULIN\",  # INSULIN\n      TRUE ~ NA_character_  # Default to NA for all other values\n    ),\n    turnover1000k = turnover/1000 # 1000k because its already in 1000's.\n    )\n```\n:::\n\n\nNow its time to make the plot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot - stacked bar chart\n  # total turnover\np1 <- ggplot(df_atc_2023_filtered, aes(x = agegroup, y = turnover1000k, fill = DC)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Total turnover by drug class\",\n    caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\"\n    )\n  # propotional turnover for each group\np2 <- ggplot(df_atc_2023_filtered, aes(x = agegroup, y = turnover1000k, fill = DC)) +\n  geom_bar(stat = \"identity\", position = \"fill\") +\n  labs(\n    y = \"\",\n    title = \"Proportional turnover by drug class\",\n    caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\"\n    )\n\np1 \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"thumbnail.png\", plot = last_plot(), width = 6, height = 4) # p1 saved as thumbnail\n\np2  \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n:::\n\n\nWell then.. The turnover for GLP1 in this country is quite impressive, with the 45 to 64 year olds taking by far the biggest piece of the pie. Thats about 6.000.000.000 DKK in turnover for that age group in 2023 alone.\n\nIn the next blog post I aim to show how to redo all that I did, as a function.\n\n**And hopefully it will also be a bit more organised**.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}