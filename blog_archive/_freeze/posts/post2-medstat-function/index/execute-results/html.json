{
  "hash": "d85e8a28dfcb3fa1305a631bea6d53f0",
  "result": {
    "markdown": "---\ntitle: \"Using R functions on medstat data\"\nauthor: \"Henrik Vitus Bering Laursen\"\ndate: \"2024-09-20\"\ncategories: \n  - code\n  - analysis\n  - exploration\n  - functions\n  - cost\n  - drugs\nimage: thumbnail.png\nfreeze: true\n---\n\n\n## Purpose\n\nI want to follow up the previous post, and the promise of showing how to put it all in to a function.\n\nAs has been written before [here](https://x.com/drob/status/928447584712253440?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E928447584712253440%7Ctwgr%5Efce88d861cd9de805481a26a56bb6e7100e8dbb3%7Ctwcon%5Es1_c10&ref_url=http%3A%2F%2Fvarianceexplained.org%2Fr%2Fstart-blog%2F), if you do something several times in R, you might as well write a function.\n\nSo I am going to condense the code I wrote for the purpose of presenting turnover for some diabetes drug classes in the previous post, and turn it in to a function.\n\n## Turning it into a function\n\nSo, I don't need to take all of the code from the previous post, just what I need for the function. I also slim the data down a bit with the [`select()`](https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html) function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nprocess_atc_data <- function(year, url) {\n  # Read the dataset directly from the URL\n  df <- read_delim(url, delim = \";\")  # Assuming the file is semicolon-delimited\n  \n  # Attach column names\n  colnames(df) <- c(\"atc\",\"year\",\"sector\",\"region\",\"sex\",\"agegroup\",\"count_persons\",\n                        \"count_persons_per1kpop\",\"turnover\",\"reimbursement\", \n                        \"sold_amount\", \"sold_amount_1kpop_day\", \"personreferabledata_perc\")\n  \n  # the column with missing values messes stuff up\n  colnames(df)[is.na(colnames(df))] <- \"missing_name\"\n  df <- df |>  select(-missing_name)\n  \n  # Filter the dataset to get only what I need\n  df_filtered <- df %>%\n    filter(str_detect(agegroup, \"-\") & str_starts(atc, \"A10\")) |> \n    select(atc,year,agegroup,turnover)\n  \n  # Define drug classes\n  DCs <- c(\"A10BJ\", \"A10BK\", \"A10BH\", \"A10BA\", \"A10BB\", \"A10BG\", \"A10BX\", \"A10A\")\n  \n  # Further filter and add a new drug class variable\n  df_filtered <- df_filtered %>%\n    filter(atc %in% DCs) %>%\n    mutate(\n      DC = case_when(\n        atc == \"A10BJ\" ~ \"GLP1\",\n        atc == \"A10BK\" ~ \"SGLT2\",\n        atc == \"A10BH\" ~ \"DPP4\",\n        atc == \"A10BA\" ~ \"Metformin\",\n        atc == \"A10BB\" ~ \"SU\",\n        atc == \"A10BG\" ~ \"Thiazo\",\n        atc == \"A10BX\" ~ \"Others\",\n        atc == \"A10A\"  ~ \"INSULIN\",\n        TRUE ~ NA_character_\n      ),\n      turnover1000k = turnover / 1000  # Turnover in 1000k units\n    )\n  \n  # Assign the names to datasets and plots using the year variable\n  df_name <- paste0(\"df_\", year)\n  assign(df_name, df_filtered, envir = .GlobalEnv)\n  \n  # Return the processed data and the plots\n  return(list(data = df_filtered)) #, total_turnover_plot = p1, proportional_turnover_plot = p2\n}\n```\n:::\n\n\nI have not brought over the code for making the plots, because I aim to use the [`facet_wrap()`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) from [`ggplot2`](https://ggplot2.tidyverse.org/index.html) to make some plots where its easier to see how the turnover has developed over the years.\n\nTo achieve that, I need to append the datasets I can create with the above function.\n\n## Creating the datasets for the plots\n\nNow, I have the list of datasets and their corresponding URLs from the last post. There should be a way to automate fetching the URLs, for example by searching the site and matching the line with the dataset name and the line with the link to download it. \n\nFor now, I just use what I already found.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get data from years 2016-2023\nprocess_atc_data(2016,\"https://medstat.dk/da/download/file/MjAxNl9hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1861363 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \";\" chr\n(4): A...1, A...5, A...6, 88 dbl (9): 2016, 0...3, 0...4, ...7, ...8, 1925435,\n1159429, ...11, ...12 lgl (1): ...14\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `A` -> `A...1`\n• `0` -> `0...3`\n• `0` -> `0...4`\n• `A` -> `A...5`\n• `A` -> `A...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...14`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$data\n# A tibble: 619 × 6\n   atc    year agegroup turnover DC      turnover1000k\n   <chr> <dbl> <chr>       <dbl> <chr>           <dbl>\n 1 A10A   2016 00-17        9354 INSULIN          9.35\n 2 A10A   2016 00-17       10103 INSULIN         10.1 \n 3 A10A   2016 00-17       19456 INSULIN         19.5 \n 4 A10A   2016 18-24        7880 INSULIN          7.88\n 5 A10A   2016 18-24       10883 INSULIN         10.9 \n 6 A10A   2016 18-24       18763 INSULIN         18.8 \n 7 A10A   2016 25-44       27658 INSULIN         27.7 \n 8 A10A   2016 25-44       41457 INSULIN         41.5 \n 9 A10A   2016 25-44       69115 INSULIN         69.1 \n10 A10A   2016 45-64       67858 INSULIN         67.9 \n# ℹ 609 more rows\n```\n:::\n\n```{.r .cell-code}\nprocess_atc_data(2017,\"https://medstat.dk/da/download/file/MjAxN19hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1851679 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \";\" chr\n(4): A...1, A...5, A...6, 88 dbl (9): 2017, 0...3, 0...4, ...7, ...8, 2008320,\n1212005, ...11, ...12 lgl (1): ...14\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `A` -> `A...1`\n• `0` -> `0...3`\n• `0` -> `0...4`\n• `A` -> `A...5`\n• `A` -> `A...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...14`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$data\n# A tibble: 621 × 6\n   atc    year agegroup turnover DC      turnover1000k\n   <chr> <dbl> <chr>       <dbl> <chr>           <dbl>\n 1 A10A   2017 00-17        9197 INSULIN          9.20\n 2 A10A   2017 00-17       10691 INSULIN         10.7 \n 3 A10A   2017 00-17       19888 INSULIN         19.9 \n 4 A10A   2017 18-24        8042 INSULIN          8.04\n 5 A10A   2017 18-24       10468 INSULIN         10.5 \n 6 A10A   2017 18-24       18509 INSULIN         18.5 \n 7 A10A   2017 25-44       27295 INSULIN         27.3 \n 8 A10A   2017 25-44       41429 INSULIN         41.4 \n 9 A10A   2017 25-44       68724 INSULIN         68.7 \n10 A10A   2017 45-64       70076 INSULIN         70.1 \n# ℹ 611 more rows\n```\n:::\n\n```{.r .cell-code}\nprocess_atc_data(2018,\"https://medstat.dk/da/download/file/MjAxOF9hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1841721 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \";\" chr\n(4): A...1, A...5, A...6, 88 dbl (9): 2018, 0...3, 0...4, ...7, ...8, 2154536,\n1311885, ...11, ...12 lgl (1): ...14\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `A` -> `A...1`\n• `0` -> `0...3`\n• `0` -> `0...4`\n• `A` -> `A...5`\n• `A` -> `A...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...14`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$data\n# A tibble: 607 × 6\n   atc    year agegroup turnover DC      turnover1000k\n   <chr> <dbl> <chr>       <dbl> <chr>           <dbl>\n 1 A10A   2018 00-17        9467 INSULIN          9.47\n 2 A10A   2018 00-17       11006 INSULIN         11.0 \n 3 A10A   2018 00-17       20473 INSULIN         20.5 \n 4 A10A   2018 18-24        8215 INSULIN          8.22\n 5 A10A   2018 18-24       10421 INSULIN         10.4 \n 6 A10A   2018 18-24       18636 INSULIN         18.6 \n 7 A10A   2018 25-44       28126 INSULIN         28.1 \n 8 A10A   2018 25-44       42639 INSULIN         42.6 \n 9 A10A   2018 25-44       70765 INSULIN         70.8 \n10 A10A   2018 45-64       72902 INSULIN         72.9 \n# ℹ 597 more rows\n```\n:::\n\n```{.r .cell-code}\nprocess_atc_data(2019,\"https://medstat.dk/da/download/file/MjAxOV9hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1833788 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \";\" chr\n(4): A...1, A...5, A...6, 89 dbl (9): 2019, 0...3, 0...4, ...7, ...8, 2395766,\n1467188, ...11, ...12 lgl (1): ...14\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `A` -> `A...1`\n• `0` -> `0...3`\n• `0` -> `0...4`\n• `A` -> `A...5`\n• `A` -> `A...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...14`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$data\n# A tibble: 601 × 6\n   atc    year agegroup turnover DC      turnover1000k\n   <chr> <dbl> <chr>       <dbl> <chr>           <dbl>\n 1 A10A   2019 00-17        9599 INSULIN          9.60\n 2 A10A   2019 00-17       11231 INSULIN         11.2 \n 3 A10A   2019 00-17       20830 INSULIN         20.8 \n 4 A10A   2019 18-24        7867 INSULIN          7.87\n 5 A10A   2019 18-24       10313 INSULIN         10.3 \n 6 A10A   2019 18-24       18180 INSULIN         18.2 \n 7 A10A   2019 25-44       26903 INSULIN         26.9 \n 8 A10A   2019 25-44       41402 INSULIN         41.4 \n 9 A10A   2019 25-44       68305 INSULIN         68.3 \n10 A10A   2019 45-64       69854 INSULIN         69.9 \n# ℹ 591 more rows\n```\n:::\n\n```{.r .cell-code}\nprocess_atc_data(2020,\"https://medstat.dk/da/download/file/MjAyMF9hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1817857 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \";\" chr\n(4): A...1, A...5, A...6, 90 dbl (9): 2020, 0...3, 0...4, ...7, ...8, 2456459,\n1511380, ...11, ...12 lgl (1): ...14\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `A` -> `A...1`\n• `0` -> `0...3`\n• `0` -> `0...4`\n• `A` -> `A...5`\n• `A` -> `A...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...14`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$data\n# A tibble: 609 × 6\n   atc    year agegroup turnover DC      turnover1000k\n   <chr> <dbl> <chr>       <dbl> <chr>           <dbl>\n 1 A10A   2020 00-17        9272 INSULIN          9.27\n 2 A10A   2020 00-17       10962 INSULIN         11.0 \n 3 A10A   2020 00-17       20234 INSULIN         20.2 \n 4 A10A   2020 18-24        7564 INSULIN          7.56\n 5 A10A   2020 18-24        9789 INSULIN          9.79\n 6 A10A   2020 18-24       17353 INSULIN         17.4 \n 7 A10A   2020 25-44       26183 INSULIN         26.2 \n 8 A10A   2020 25-44       39902 INSULIN         39.9 \n 9 A10A   2020 25-44       66085 INSULIN         66.1 \n10 A10A   2020 45-64       66259 INSULIN         66.3 \n# ℹ 599 more rows\n```\n:::\n\n```{.r .cell-code}\nprocess_atc_data(2021,\"https://medstat.dk/da/download/file/MjAyMV9hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1802119 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \";\" chr\n(4): A...1, A...5, A...6, 90 dbl (9): 2021, 0...3, 0...4, ...7, ...8, 2719403,\n1650909, ...11, ...12 lgl (1): ...14\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `A` -> `A...1`\n• `0` -> `0...3`\n• `0` -> `0...4`\n• `A` -> `A...5`\n• `A` -> `A...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...14`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$data\n# A tibble: 613 × 6\n   atc    year agegroup turnover DC      turnover1000k\n   <chr> <dbl> <chr>       <dbl> <chr>           <dbl>\n 1 A10A   2021 00-17        9202 INSULIN          9.20\n 2 A10A   2021 00-17       10907 INSULIN         10.9 \n 3 A10A   2021 00-17       20109 INSULIN         20.1 \n 4 A10A   2021 18-24        7484 INSULIN          7.48\n 5 A10A   2021 18-24        9554 INSULIN          9.55\n 6 A10A   2021 18-24       17038 INSULIN         17.0 \n 7 A10A   2021 25-44       24773 INSULIN         24.8 \n 8 A10A   2021 25-44       38364 INSULIN         38.4 \n 9 A10A   2021 25-44       63137 INSULIN         63.1 \n10 A10A   2021 45-64       61082 INSULIN         61.1 \n# ℹ 603 more rows\n```\n:::\n\n```{.r .cell-code}\nprocess_atc_data(2022,\"https://medstat.dk/da/download/file/MjAyMl9hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1814587 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \";\" chr\n(4): A...1, A...5, A...6, 91 dbl (9): 2022, 0...3, 0...4, ...7, ...8, 3112077,\n1863246, ...11, ...12 lgl (1): ...14\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `A` -> `A...1`\n• `0` -> `0...3`\n• `0` -> `0...4`\n• `A` -> `A...5`\n• `A` -> `A...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...14`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$data\n# A tibble: 609 × 6\n   atc    year agegroup turnover DC      turnover1000k\n   <chr> <dbl> <chr>       <dbl> <chr>           <dbl>\n 1 A10A   2022 00-17        7502 INSULIN          7.50\n 2 A10A   2022 00-17        8733 INSULIN          8.73\n 3 A10A   2022 00-17       16235 INSULIN         16.2 \n 4 A10A   2022 18-24        5899 INSULIN          5.90\n 5 A10A   2022 18-24        7943 INSULIN          7.94\n 6 A10A   2022 18-24       13841 INSULIN         13.8 \n 7 A10A   2022 25-44       19962 INSULIN         20.0 \n 8 A10A   2022 25-44       30580 INSULIN         30.6 \n 9 A10A   2022 25-44       50543 INSULIN         50.5 \n10 A10A   2022 45-64       49506 INSULIN         49.5 \n# ℹ 599 more rows\n```\n:::\n\n```{.r .cell-code}\nprocess_atc_data(2023,\"https://medstat.dk/da/download/file/MjAyM19hdGNfY29kZV9kYXRhLnR4dA==\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1806544 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \";\" chr\n(4): A...1, A...5, A...6, 94 dbl (9): 2023, 0...3, 0...4, ...7, ...8, 5009988,\n2661589, ...11, ...12 lgl (1): ...14\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `A` -> `A...1`\n• `0` -> `0...3`\n• `0` -> `0...4`\n• `A` -> `A...5`\n• `A` -> `A...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...14`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$data\n# A tibble: 563 × 6\n   atc    year agegroup turnover DC      turnover1000k\n   <chr> <dbl> <chr>       <dbl> <chr>           <dbl>\n 1 A10A   2023 00-17        7510 INSULIN          7.51\n 2 A10A   2023 00-17        8599 INSULIN          8.60\n 3 A10A   2023 00-17       16109 INSULIN         16.1 \n 4 A10A   2023 18-24        5980 INSULIN          5.98\n 5 A10A   2023 18-24        8058 INSULIN          8.06\n 6 A10A   2023 18-24       14039 INSULIN         14.0 \n 7 A10A   2023 25-44       19680 INSULIN         19.7 \n 8 A10A   2023 25-44       30630 INSULIN         30.6 \n 9 A10A   2023 25-44       50311 INSULIN         50.3 \n10 A10A   2023 45-64       46624 INSULIN         46.6 \n# ℹ 553 more rows\n```\n:::\n:::\n\n\nActually, I could just use the [`purr::map()`](https://purrr.tidyverse.org/reference/map.html) function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the purr library\nlibrary(purrr)\n\n# Define a list of URLs corresponding to each year (2016 to 2023)\nurls <- list(\n  \"2016\" = \"https://medstat.dk/da/download/file/MjAxNl9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2017\" = \"https://medstat.dk/da/download/file/MjAxN19hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2018\" = \"https://medstat.dk/da/download/file/MjAxOF9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2019\" = \"https://medstat.dk/da/download/file/MjAxOV9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2020\" = \"https://medstat.dk/da/download/file/MjAyMF9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2021\" = \"https://medstat.dk/da/download/file/MjAyMV9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2022\" = \"https://medstat.dk/da/download/file/MjAyMl9hdGNfY29kZV9kYXRhLnR4dA==\",\n  \"2023\" = \"https://medstat.dk/da/download/file/MjAyM19hdGNfY29kZV9kYXRhLnR4dA==\"\n)\n\n# Vector of years you want to process\nyears <- 2016:2023\n\n# Use map to iterate over years and URLs\ndf_allyears <- map2(years, urls, process_atc_data)\n\n# Example: Access the result for a specific year\ndf_2023 <- df_allyears[[1]] # The first year of the bunch, 2016\n\n# Combine all the datasets into one - and avoiding getting \"$\" in all the the variable names while doing it\ndf_allyears <- bind_rows(df_allyears)\ndf_allyears <- map(df_allyears, as_tibble)\ndf_allyears <- bind_rows(df_allyears)\n```\n:::\n\n\nThis is using even less space (if you look past the part about defining a list of URLs). *I swear, I do not know why i need to repeat the bind rows function for it to work*.\n\n## Making the plots\n\nNow that we have a combined dataset, `df_allyears`, with all the data to recreate the plots from the last post, we can try to make a plot. Let's see if `facet_wrap()` makes a reasonable graph with all eight years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Making the base graph to add unto \np_base <- ggplot(df_allyears, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\")\n\n# Just seeing how it looks with ALL data summarised over the years\np_base + geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\np_base + geom_bar(stat = \"identity\", position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Testing facet_wrap on the total turnover\np_base + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-3.png){width=672}\n:::\n\n```{.r .cell-code}\np_base + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-4.png){width=672}\n:::\n:::\n\n\nNow, that is a LOT of information squeezed down on little space. So lets subset it and do the `facetwrap()` on four years at a time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset the data\ndf_early <- df_allyears |> \n  filter(year < 2020)\ndf_late <- df_allyears |> \n  filter(year >= 2020)\n\n# Now for the graphs\n  # New bases\np_base_early <- ggplot(df_early, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\")\np_base_late <- ggplot(df_late, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\")\n\n  # New graphs\n    # Early\np_base_early + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\np_base_early + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\n    # Late\np_base_late + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n\n```{.r .cell-code}\np_base_late + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-4.png){width=672}\n:::\n:::\n\n\nOk, but we can do this better, making it more easily comparable by having the same y-axis on both the early and late dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_base_early <- ggplot(df_early, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\") \np_base_late <- ggplot(df_late, aes(x = agegroup, y = turnover1000k, fill = DC)) + \n  labs(caption = \"Source: own calculations based on data from medstat.dk via the Danish Health Data Authority\") \n\n  # New graphs\n    # Early\np_base_early + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year) + ylim(0,7500)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\np_base_early + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\n    # Late\np_base_late + \n  geom_bar(stat = \"identity\") +\n  facet_wrap(~year) + ylim(0,7500)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n\n```{.r .cell-code}\np_base_late + \n  geom_bar(stat = \"identity\", position = \"fill\") +\n  facet_wrap(~year) +\n  labs(y = \"\", x = \"\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-4.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"thumbnail.png\", plot = last_plot(), width = 6, height = 4) # saving p_base_late as thumbnail\n```\n:::\n\n\n## Commenting on the output\n\nSo, the graphs overwhelmingly show a tremendous increase in the spending on GLP1.\n\nWhere insulin in the early period of 2016-2019 rivaled or was higher than GLP1, in the late period, GLP1 completely overshadows all other drugs within the chosen classes.\n\nBetween 2022 and 2023 there seem to be a doubling of the turnover. Turnover typically represents the overall revenue generated in the pharmacy sector. \n\nThis can mean both increased spending, and increased prices. We will look at that in the next post.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}